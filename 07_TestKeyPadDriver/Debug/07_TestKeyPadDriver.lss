
07_TestKeyPadDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00001db0  00001e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019bc  00000000  00000000  00001e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001062  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000489a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000049da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000767e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000842c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000858c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008819  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 56 0e 	call	0x1cac	; 0x1cac <main>
      7a:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_voidInit>:




void LCD_voidInit( void )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e2       	ldi	r26, 0x20	; 32
     b50:	b2 e4       	ldi	r27, 0x42	; 66
     b52:	8b 87       	std	Y+11, r24	; 0x0b
     b54:	9c 87       	std	Y+12, r25	; 0x0c
     b56:	ad 87       	std	Y+13, r26	; 0x0d
     b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b60:	9e 85       	ldd	r25, Y+14	; 0x0e
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	4a ef       	ldi	r20, 0xFA	; 250
     b68:	54 e4       	ldi	r21, 0x44	; 68
     b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	8f 83       	std	Y+7, r24	; 0x07
     b74:	98 87       	std	Y+8, r25	; 0x08
     b76:	a9 87       	std	Y+9, r26	; 0x09
     b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b7a:	6f 81       	ldd	r22, Y+7	; 0x07
     b7c:	78 85       	ldd	r23, Y+8	; 0x08
     b7e:	89 85       	ldd	r24, Y+9	; 0x09
     b80:	9a 85       	ldd	r25, Y+10	; 0x0a
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     b8e:	88 23       	and	r24, r24
     b90:	2c f4       	brge	.+10     	; 0xb9c <LCD_voidInit+0x66>
		__ticks = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9e 83       	std	Y+6, r25	; 0x06
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	3f c0       	rjmp	.+126    	; 0xc1a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
     b9c:	6f 81       	ldd	r22, Y+7	; 0x07
     b9e:	78 85       	ldd	r23, Y+8	; 0x08
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	4c f5       	brge	.+82     	; 0xc06 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bba:	9e 85       	ldd	r25, Y+14	; 0x0e
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	9e 83       	std	Y+6, r25	; 0x06
     bda:	8d 83       	std	Y+5, r24	; 0x05
     bdc:	0f c0       	rjmp	.+30     	; 0xbfc <LCD_voidInit+0xc6>
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <LCD_voidInit+0xb4>
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf2:	8d 81       	ldd	r24, Y+5	; 0x05
     bf4:	9e 81       	ldd	r25, Y+6	; 0x06
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	69 f7       	brne	.-38     	; 0xbde <LCD_voidInit+0xa8>
     c04:	14 c0       	rjmp	.+40     	; 0xc2e <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 83       	std	Y+5, r24	; 0x05
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <LCD_voidInit+0xf0>
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	/* wait more than 30ms */
	_delay_ms(40);
	/* function set command : 2 lines(DB3), 5*8 font size(DB2) */
	LCD_voidSendCommand(0b00111000);
     c2e:	88 e3       	ldi	r24, 0x38	; 56
     c30:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
	/* Display ON/OFF control : Display enable , No cursor , No blink */
	LCD_voidSendCommand(0b00001100);
     c34:	8c e0       	ldi	r24, 0x0C	; 12
     c36:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
	/* Display clear */
	LCD_voidSendCommand(0b00000001);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
	/* Entry mode set ( don't care ) */

}
     c40:	2e 96       	adiw	r28, 0x0e	; 14
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <LCD_voidSendCommand>:


void LCD_voidSendCommand( u8 Copy_u8Command)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	2f 97       	sbiw	r28, 0x0f	; 15
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	65 e0       	ldi	r22, 0x05	; 5
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

	/*Set RW pin to low for writing commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	66 e0       	ldi	r22, 0x06	; 6
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

	/*Send commands using data port*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	6f 85       	ldd	r22, Y+15	; 0x0f
     c80:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPortValue>

	/*Set enable pin to high for 2ms then set it to low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, HIGH);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	67 e0       	ldi	r22, 0x07	; 7
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	b0 e4       	ldi	r27, 0x40	; 64
     c96:	8b 87       	std	Y+11, r24	; 0x0b
     c98:	9c 87       	std	Y+12, r25	; 0x0c
     c9a:	ad 87       	std	Y+13, r26	; 0x0d
     c9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	4a ef       	ldi	r20, 0xFA	; 250
     cac:	54 e4       	ldi	r21, 0x44	; 68
     cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	8f 83       	std	Y+7, r24	; 0x07
     cb8:	98 87       	std	Y+8, r25	; 0x08
     cba:	a9 87       	std	Y+9, r26	; 0x09
     cbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cbe:	6f 81       	ldd	r22, Y+7	; 0x07
     cc0:	78 85       	ldd	r23, Y+8	; 0x08
     cc2:	89 85       	ldd	r24, Y+9	; 0x09
     cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	2c f4       	brge	.+10     	; 0xce0 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9e 83       	std	Y+6, r25	; 0x06
     cdc:	8d 83       	std	Y+5, r24	; 0x05
     cde:	3f c0       	rjmp	.+126    	; 0xd5e <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     ce0:	6f 81       	ldd	r22, Y+7	; 0x07
     ce2:	78 85       	ldd	r23, Y+8	; 0x08
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f e7       	ldi	r20, 0x7F	; 127
     cee:	57 e4       	ldi	r21, 0x47	; 71
     cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	4c f5       	brge	.+82     	; 0xd4a <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e2       	ldi	r20, 0x20	; 32
     d06:	51 e4       	ldi	r21, 0x41	; 65
     d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	bc 01       	movw	r22, r24
     d12:	cd 01       	movw	r24, r26
     d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	9e 83       	std	Y+6, r25	; 0x06
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	0f c0       	rjmp	.+30     	; 0xd40 <LCD_voidSendCommand+0xee>
     d22:	88 ec       	ldi	r24, 0xC8	; 200
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9c 83       	std	Y+4, r25	; 0x04
     d28:	8b 83       	std	Y+3, r24	; 0x03
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <LCD_voidSendCommand+0xdc>
     d32:	9c 83       	std	Y+4, r25	; 0x04
     d34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	9e 81       	ldd	r25, Y+6	; 0x06
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	69 f7       	brne	.-38     	; 0xd22 <LCD_voidSendCommand+0xd0>
     d48:	14 c0       	rjmp	.+40     	; 0xd72 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4a:	6f 81       	ldd	r22, Y+7	; 0x07
     d4c:	78 85       	ldd	r23, Y+8	; 0x08
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <LCD_voidSendCommand+0x118>
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, LOW);
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	67 e0       	ldi	r22, 0x07	; 7
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

}
     d7c:	2f 96       	adiw	r28, 0x0f	; 15
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <LCD_voidSendData>:


void LCD_voidSendData( u8 Copy_u8Data )
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	2f 97       	sbiw	r28, 0x0f	; 15
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

	/*Set RW pin to low for writing commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	66 e0       	ldi	r22, 0x06	; 6
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

	/*Send commands using data port*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	6f 85       	ldd	r22, Y+15	; 0x0f
     dbc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPortValue>

	/*Set enable pin to high for 2ms then set it to low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, HIGH);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	67 e0       	ldi	r22, 0x07	; 7
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e4       	ldi	r27, 0x40	; 64
     dd2:	8b 87       	std	Y+11, r24	; 0x0b
     dd4:	9c 87       	std	Y+12, r25	; 0x0c
     dd6:	ad 87       	std	Y+13, r26	; 0x0d
     dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a ef       	ldi	r20, 0xFA	; 250
     de8:	54 e4       	ldi	r21, 0x44	; 68
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	8f 83       	std	Y+7, r24	; 0x07
     df4:	98 87       	std	Y+8, r25	; 0x08
     df6:	a9 87       	std	Y+9, r26	; 0x09
     df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <LCD_voidSendData+0x8e>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	4c f5       	brge	.+82     	; 0xe86 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <LCD_voidSendData+0xee>
     e5e:	88 ec       	ldi	r24, 0xC8	; 200
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <LCD_voidSendData+0xdc>
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <LCD_voidSendData+0xd0>
     e84:	14 c0       	rjmp	.+40     	; 0xeae <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <LCD_voidSendData+0x118>
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, LOW);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	67 e0       	ldi	r22, 0x07	; 7
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
}
     eb8:	2f 96       	adiw	r28, 0x0f	; 15
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <LCD_voidPrintString>:


void LCD_voidPrintString( const char* Copy_pcString )
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <LCD_voidPrintString+0x6>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9b 83       	std	Y+3, r25	; 0x03
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8EndString = 0 ;
     eda:	19 82       	std	Y+1, r1	; 0x01
     edc:	0e c0       	rjmp	.+28     	; 0xefa <LCD_voidPrintString+0x30>
	while( Copy_pcString[ Local_u8EndString ] != '\0' )
	{
		LCD_voidSendData( Copy_pcString[ Local_u8EndString ] ) ;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	80 81       	ld	r24, Z
     ef0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_voidSendData>
		Local_u8EndString ++ ;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidPrintString( const char* Copy_pcString )
{
	u8 Local_u8EndString = 0 ;
	while( Copy_pcString[ Local_u8EndString ] != '\0' )
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	9b 81       	ldd	r25, Y+3	; 0x03
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	88 23       	and	r24, r24
     f0e:	39 f7       	brne	.-50     	; 0xede <LCD_voidPrintString+0x14>
	{
		LCD_voidSendData( Copy_pcString[ Local_u8EndString ] ) ;
		Local_u8EndString ++ ;
	}
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <LCD_voidPrintChar>:

void LCD_voidPrintChar( const u8 Copy_u8Char )
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
	/* send data to LCD */
	LCD_voidSendData( Copy_u8Char );
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_voidSendData>
}
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <LCD_voidClear>:

void LCD_voidClear( void )
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	/* clear screen of LCD */
	LCD_voidSendCommand( 1 ) ;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
}
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <LCD_voidCursorHome>:

void LCD_voidCursorHome( void )
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* send command to return cursor to home */
	LCD_voidSendCommand( 0b00000010 );
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <LCD_voidSetCursorPos>:



void LCD_voidSetCursorPos( u8 Copy_u8NumOfRow, u8 Copy_u8NumOfColumn )
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <LCD_voidSetCursorPos+0x6>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to store address you want to start from */
	u8 Local_u8Address ;

	if( Copy_u8NumOfRow == 0 )
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 23       	and	r24, r24
     f72:	19 f4       	brne	.+6      	; 0xf7a <LCD_voidSetCursorPos+0x1c>
	{
		/* address is the same number of column in first Row */
		Local_u8Address = Copy_u8NumOfColumn ;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <LCD_voidSetCursorPos+0x28>
	}
	else if ( Copy_u8NumOfRow == 1 )
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	19 f4       	brne	.+6      	; 0xf86 <LCD_voidSetCursorPos+0x28>
	{
		/* address is the same number of column + 40 in second Row */
		Local_u8Address = Copy_u8NumOfColumn + 0x40 ;
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	80 5c       	subi	r24, 0xC0	; 192
     f84:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Set bit 7 to set DDRAM address */
	Local_u8Address |= ( 1 << 7 ) ;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	89 83       	std	Y+1, r24	; 0x01
	/* send address you want to write data from it */
	LCD_voidSendCommand( Local_u8Address );
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <LCD_voidAddSpecialChar>:


void LCD_voidAddSpecialChar( const u8* Copy_pu8CharDesign, u8 Copy_u8PatternNum )
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <LCD_voidAddSpecialChar+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <LCD_voidAddSpecialChar+0x8>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	6d 83       	std	Y+5, r22	; 0x05
	/* variable to hold start address */
	u8 Local_u8CGRAMaddress = 0;
     fb2:	1a 82       	std	Y+2, r1	; 0x02
	/* set bit 6 and clear bit 7 to set CGRAM address */
	Local_u8CGRAMaddress = Copy_u8PatternNum * 8;
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMaddress |= ( 1 << 6 );
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	80 64       	ori	r24, 0x40	; 64
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	/* detect address of CGRAM you will write on ( 0 ~ 7 ) */
	LCD_voidSendCommand( Local_u8CGRAMaddress ) ;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	0e 94 29 06 	call	0xc52	; 0xc52 <LCD_voidSendCommand>
	/* Write character design inside CGRAM */
	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++ )
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <LCD_voidAddSpecialChar+0x56>
	{
		/* Send Pattern to CGRAM byte by byte */
		LCD_voidSendData( Copy_pu8CharDesign[ Local_u8Counter ] );
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	fc 01       	movw	r30, r24
     fe4:	e2 0f       	add	r30, r18
     fe6:	f3 1f       	adc	r31, r19
     fe8:	80 81       	ld	r24, Z
     fea:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_voidSendData>
	Local_u8CGRAMaddress = Copy_u8PatternNum * 8;
	Local_u8CGRAMaddress |= ( 1 << 6 );
	/* detect address of CGRAM you will write on ( 0 ~ 7 ) */
	LCD_voidSendCommand( Local_u8CGRAMaddress ) ;
	/* Write character design inside CGRAM */
	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++ )
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 30       	cpi	r24, 0x08	; 8
     ff8:	78 f3       	brcs	.-34     	; 0xfd8 <LCD_voidAddSpecialChar+0x3a>
	{
		/* Send Pattern to CGRAM byte by byte */
		LCD_voidSendData( Copy_pu8CharDesign[ Local_u8Counter ] );
	}

}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <LCD_voidPrintSpecialChar>:

void LCD_voidPrintSpecialChar( u8 Copy_u8PatternNum, u8 Copy_u8RowNum, u8 Copy_u8ColumnNum )
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <LCD_voidPrintSpecialChar+0x6>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	6a 83       	std	Y+2, r22	; 0x02
    101a:	4b 83       	std	Y+3, r20	; 0x03
	/* go to address on DD RAM */
	LCD_voidSetCursorPos( Copy_u8RowNum, Copy_u8ColumnNum );
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	6b 81       	ldd	r22, Y+3	; 0x03
    1020:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_voidSetCursorPos>
	/* print special character on LCD */
	LCD_voidSendData( Copy_u8PatternNum );
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_voidSendData>
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <LCD_voidPrintNumber>:


void LCD_voidPrintNumber(u32 Copy_u32Number)
{
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	29 97       	sbiw	r28, 0x09	; 9
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	6c 83       	std	Y+4, r22	; 0x04
    1054:	7d 83       	std	Y+5, r23	; 0x05
    1056:	8e 83       	std	Y+6, r24	; 0x06
    1058:	9f 83       	std	Y+7, r25	; 0x07

	IntegerToString( Local_u8Buffer, Local_u8BufferSize, Copy_u32Number );

	LCD_voidPrintString( Local_u8Buffer );

}
    105a:	0d b7       	in	r16, 0x3d	; 61
    105c:	1e b7       	in	r17, 0x3e	; 62
	LCD_voidSendData( Copy_u8PatternNum );
}


void LCD_voidPrintNumber(u32 Copy_u32Number)
{
    105e:	8d b7       	in	r24, 0x3d	; 61
    1060:	9e b7       	in	r25, 0x3e	; 62
    1062:	7c 01       	movw	r14, r24
	u8 Local_u8BufferSize;

	Local_u8BufferSize = CalcNumOfDigit( Copy_u32Number ) + 1;
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	ae 81       	ldd	r26, Y+6	; 0x06
    106a:	bf 81       	ldd	r27, Y+7	; 0x07
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 da 08 	call	0x11b4	; 0x11b4 <CalcNumOfDigit>
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	89 83       	std	Y+1, r24	; 0x01

	char Local_u8Buffer[Local_u8BufferSize] ;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	2d b7       	in	r18, 0x3d	; 61
    1080:	3e b7       	in	r19, 0x3e	; 62
    1082:	28 1b       	sub	r18, r24
    1084:	39 0b       	sbc	r19, r25
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	3e bf       	out	0x3e, r19	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	2d bf       	out	0x3d, r18	; 61
    1090:	8d b7       	in	r24, 0x3d	; 61
    1092:	9e b7       	in	r25, 0x3e	; 62
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	99 87       	std	Y+9, r25	; 0x09
    1098:	88 87       	std	Y+8, r24	; 0x08
    109a:	88 85       	ldd	r24, Y+8	; 0x08
    109c:	99 85       	ldd	r25, Y+9	; 0x09
    109e:	00 96       	adiw	r24, 0x00	; 0
    10a0:	99 87       	std	Y+9, r25	; 0x09
    10a2:	88 87       	std	Y+8, r24	; 0x08
    10a4:	28 85       	ldd	r18, Y+8	; 0x08
    10a6:	39 85       	ldd	r19, Y+9	; 0x09
    10a8:	3b 83       	std	Y+3, r19	; 0x03
    10aa:	2a 83       	std	Y+2, r18	; 0x02

	IntegerToString( Local_u8Buffer, Local_u8BufferSize, Copy_u32Number );
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	9b 81       	ldd	r25, Y+3	; 0x03
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	4e 81       	ldd	r20, Y+6	; 0x06
    10b6:	5f 81       	ldd	r21, Y+7	; 0x07
    10b8:	69 81       	ldd	r22, Y+1	; 0x01
    10ba:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <IntegerToString>

	LCD_voidPrintString( Local_u8Buffer );
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	0e 94 65 07 	call	0xeca	; 0xeca <LCD_voidPrintString>
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	fe be       	out	0x3e, r15	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	ed be       	out	0x3d, r14	; 61

}
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	1e bf       	out	0x3e, r17	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0d bf       	out	0x3d, r16	; 61
    10da:	29 96       	adiw	r28, 0x09	; 9
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	08 95       	ret

000010f4 <IntegerToString>:
 ** Description => convert integer into string to print it on LCD                 **
 ** Input       => array to hold string, array size, integer to convert it        **
 ** Output      => none                                                           **
 ***********************************************************************************/
void IntegerToString(char* Copy_pcString, u8 Copy_u8StringSize, u32 Copy_u32Integer)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	29 97       	sbiw	r28, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
    110c:	6d 83       	std	Y+5, r22	; 0x05
    110e:	2e 83       	std	Y+6, r18	; 0x06
    1110:	3f 83       	std	Y+7, r19	; 0x07
    1112:	48 87       	std	Y+8, r20	; 0x08
    1114:	59 87       	std	Y+9, r21	; 0x09
	s8 Local_u8Iterator;
	u8 Local_u8OneDigit;

	Local_u8Iterator = Copy_u8StringSize - 1;
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	8a 83       	std	Y+2, r24	; 0x02
	Copy_pcString[Local_u8Iterator] = '\0';
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	33 27       	eor	r19, r19
    1122:	27 fd       	sbrc	r18, 7
    1124:	30 95       	com	r19
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	fc 01       	movw	r30, r24
    112c:	e2 0f       	add	r30, r18
    112e:	f3 1f       	adc	r31, r19
    1130:	10 82       	st	Z, r1
	Local_u8Iterator--;
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	31 c0       	rjmp	.+98     	; 0x119c <IntegerToString+0xa8>

	while(Local_u8Iterator >= 0)
	{
		Local_u8OneDigit = Copy_u32Integer % 10;
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	a8 85       	ldd	r26, Y+8	; 0x08
    1140:	b9 85       	ldd	r27, Y+9	; 0x09
    1142:	2a e0       	ldi	r18, 0x0A	; 10
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__udivmodsi4>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	89 83       	std	Y+1, r24	; 0x01
		Copy_pcString[Local_u8Iterator] = Local_u8OneDigit + '0';
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	33 27       	eor	r19, r19
    115e:	27 fd       	sbrc	r18, 7
    1160:	30 95       	com	r19
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	fc 01       	movw	r30, r24
    1168:	e2 0f       	add	r30, r18
    116a:	f3 1f       	adc	r31, r19
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	80 5d       	subi	r24, 0xD0	; 208
    1170:	80 83       	st	Z, r24
		Copy_u32Integer  = Copy_u32Integer / 10;
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	a8 85       	ldd	r26, Y+8	; 0x08
    1178:	b9 85       	ldd	r27, Y+9	; 0x09
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__udivmodsi4>
    118a:	da 01       	movw	r26, r20
    118c:	c9 01       	movw	r24, r18
    118e:	8e 83       	std	Y+6, r24	; 0x06
    1190:	9f 83       	std	Y+7, r25	; 0x07
    1192:	a8 87       	std	Y+8, r26	; 0x08
    1194:	b9 87       	std	Y+9, r27	; 0x09
		Local_u8Iterator--;
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	8a 83       	std	Y+2, r24	; 0x02

	Local_u8Iterator = Copy_u8StringSize - 1;
	Copy_pcString[Local_u8Iterator] = '\0';
	Local_u8Iterator--;

	while(Local_u8Iterator >= 0)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 23       	and	r24, r24
    11a0:	64 f6       	brge	.-104    	; 0x113a <IntegerToString+0x46>
		Copy_pcString[Local_u8Iterator] = Local_u8OneDigit + '0';
		Copy_u32Integer  = Copy_u32Integer / 10;
		Local_u8Iterator--;
	}//end while

}
    11a2:	29 96       	adiw	r28, 0x09	; 9
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <CalcNumOfDigit>:
 ** Description => calculate number of digit of integer positive number           **
 ** Input       => unsigned integer number                                        **
 ** Output      => number of digit                                                **
 ***********************************************************************************/
u8 CalcNumOfDigit( u32 Copy_u8Integer )
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <CalcNumOfDigit+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <CalcNumOfDigit+0x8>
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	6a 83       	std	Y+2, r22	; 0x02
    11c4:	7b 83       	std	Y+3, r23	; 0x03
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	9d 83       	std	Y+5, r25	; 0x05
	u8 Copy_pu8NumOfDigit = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	15 c0       	rjmp	.+42     	; 0x11fa <CalcNumOfDigit+0x46>

	while( Copy_u8Integer > 9 )
	{
		Copy_pu8NumOfDigit++;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Integer = Copy_u8Integer / 10 ;
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	ac 81       	ldd	r26, Y+4	; 0x04
    11dc:	bd 81       	ldd	r27, Y+5	; 0x05
    11de:	2a e0       	ldi	r18, 0x0A	; 10
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__udivmodsi4>
    11ee:	da 01       	movw	r26, r20
    11f0:	c9 01       	movw	r24, r18
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	9b 83       	std	Y+3, r25	; 0x03
    11f6:	ac 83       	std	Y+4, r26	; 0x04
    11f8:	bd 83       	std	Y+5, r27	; 0x05
 ***********************************************************************************/
u8 CalcNumOfDigit( u32 Copy_u8Integer )
{
	u8 Copy_pu8NumOfDigit = 1;

	while( Copy_u8Integer > 9 )
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	9b 81       	ldd	r25, Y+3	; 0x03
    11fe:	ac 81       	ldd	r26, Y+4	; 0x04
    1200:	bd 81       	ldd	r27, Y+5	; 0x05
    1202:	8a 30       	cpi	r24, 0x0A	; 10
    1204:	91 05       	cpc	r25, r1
    1206:	a1 05       	cpc	r26, r1
    1208:	b1 05       	cpc	r27, r1
    120a:	10 f7       	brcc	.-60     	; 0x11d0 <CalcNumOfDigit+0x1c>
	{
		Copy_pu8NumOfDigit++;
		Copy_u8Integer = Copy_u8Integer / 10 ;
	}

	return Copy_pu8NumOfDigit;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <KPD_voidInit>:
#include "KPD_private.h"

#include "../../1-MCAL/1-DIO/DIO_interface.h"

void KPD_voidInit( void )
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	29 97       	sbiw	r28, 0x09	; 9
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator = 0;
    1232:	19 82       	std	Y+1, r1	; 0x01
    u8 KPD_ROW_ARR[]    ={ KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN };
    1234:	87 e0       	ldi	r24, 0x07	; 7
    1236:	8a 83       	std	Y+2, r24	; 0x02
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	8c 83       	std	Y+4, r24	; 0x04
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	8d 83       	std	Y+5, r24	; 0x05
    u8 KPD_COLUMN_ARR[] ={ KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN };
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	8e 83       	std	Y+6, r24	; 0x06
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	8f 83       	std	Y+7, r24	; 0x07
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	88 87       	std	Y+8, r24	; 0x08
    1250:	19 86       	std	Y+9, r1	; 0x09

	/* set row as input     */
    for( Local_u8Iterator = 0 ; Local_u8Iterator < 4; Local_u8Iterator++ )
    1252:	19 82       	std	Y+1, r1	; 0x01
    1254:	1f c0       	rjmp	.+62     	; 0x1294 <KPD_voidInit+0x76>
    {
    	/* active pull up */
    	DIO_u8SetPinDirection(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], INPUT);
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	ce 01       	movw	r24, r28
    125e:	02 96       	adiw	r24, 0x02	; 2
    1260:	fc 01       	movw	r30, r24
    1262:	e2 0f       	add	r30, r18
    1264:	f3 1f       	adc	r31, r19
    1266:	90 81       	ld	r25, Z
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	69 2f       	mov	r22, r25
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <DIO_u8SetPinDirection>
    	DIO_u8SetPinValue(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], HIGH);
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	ce 01       	movw	r24, r28
    127a:	02 96       	adiw	r24, 0x02	; 2
    127c:	fc 01       	movw	r30, r24
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	90 81       	ld	r25, Z
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	69 2f       	mov	r22, r25
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
	u8 Local_u8Iterator = 0;
    u8 KPD_ROW_ARR[]    ={ KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN };
    u8 KPD_COLUMN_ARR[] ={ KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN };

	/* set row as input     */
    for( Local_u8Iterator = 0 ; Local_u8Iterator < 4; Local_u8Iterator++ )
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	f0 f2       	brcs	.-68     	; 0x1256 <KPD_voidInit+0x38>
    	DIO_u8SetPinDirection(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], INPUT);
    	DIO_u8SetPinValue(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], HIGH);
    }

	/* set column as output */
    for( Local_u8Iterator = 0 ; Local_u8Iterator < 4; Local_u8Iterator++ )
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	1f c0       	rjmp	.+62     	; 0x12dc <KPD_voidInit+0xbe>
    {
    	/* active pull up */
    	DIO_u8SetPinDirection(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8Iterator], OUTPUT);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	ce 01       	movw	r24, r28
    12a6:	06 96       	adiw	r24, 0x06	; 6
    12a8:	fc 01       	movw	r30, r24
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	90 81       	ld	r25, Z
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	69 2f       	mov	r22, r25
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <DIO_u8SetPinDirection>
    	DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8Iterator], HIGH);
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	ce 01       	movw	r24, r28
    12c2:	06 96       	adiw	r24, 0x06	; 6
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	90 81       	ld	r25, Z
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	69 2f       	mov	r22, r25
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
    	DIO_u8SetPinDirection(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], INPUT);
    	DIO_u8SetPinValue(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8Iterator], HIGH);
    }

	/* set column as output */
    for( Local_u8Iterator = 0 ; Local_u8Iterator < 4; Local_u8Iterator++ )
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	f0 f2       	brcs	.-68     	; 0x129e <KPD_voidInit+0x80>
    	/* active pull up */
    	DIO_u8SetPinDirection(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8Iterator], OUTPUT);
    	DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8Iterator], HIGH);
    }

}
    12e2:	29 96       	adiw	r28, 0x09	; 9
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <KPD_voidGetPressedKey>:

void KPD_voidGetPressedKey( u8* Copy_pu8PressedKey )
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	6b 97       	sbiw	r28, 0x1b	; 27
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	9b 8f       	std	Y+27, r25	; 0x1b
    130a:	8a 8f       	std	Y+26, r24	; 0x1a
    u8 KPD_ROW_ARR[]    ={ KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN };
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	89 8b       	std	Y+17, r24	; 0x11
    1310:	86 e0       	ldi	r24, 0x06	; 6
    1312:	8a 8b       	std	Y+18, r24	; 0x12
    1314:	85 e0       	ldi	r24, 0x05	; 5
    1316:	8b 8b       	std	Y+19, r24	; 0x13
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	8c 8b       	std	Y+20, r24	; 0x14
    u8 KPD_COLUMN_ARR[] ={ KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN };
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	8d 8b       	std	Y+21, r24	; 0x15
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	8e 8b       	std	Y+22, r24	; 0x16
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8f 8b       	std	Y+23, r24	; 0x17
    1328:	18 8e       	std	Y+24, r1	; 0x18

	u8 Local_u8ColumnIndex = 0;
    132a:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8RowIndex    = 0;
    132c:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Local_u8RowChek    = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	89 8f       	std	Y+25, r24	; 0x19
	*Copy_pu8PressedKey   = NOT_PRESSED;
    1332:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1334:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1336:	85 e6       	ldi	r24, 0x65	; 101
    1338:	80 83       	st	Z, r24

	/* Loop for columns */
	for( Local_u8ColumnIndex = 0; Local_u8ColumnIndex < 4; Local_u8ColumnIndex++ )
    133a:	18 8a       	std	Y+16, r1	; 0x10
    133c:	d1 c0       	rjmp	.+418    	; 0x14e0 <KPD_voidGetPressedKey+0x1ec>
	{
		/* set one column to low */
		DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8ColumnIndex], LOW);
    133e:	88 89       	ldd	r24, Y+16	; 0x10
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	45 96       	adiw	r24, 0x15	; 21
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	90 81       	ld	r25, Z
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	69 2f       	mov	r22, r25
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

		/* Loop for checking rows */
		for( Local_u8RowIndex = 0; Local_u8RowIndex < 4; Local_u8RowIndex++ )
    135a:	1f 86       	std	Y+15, r1	; 0x0f
    135c:	ac c0       	rjmp	.+344    	; 0x14b6 <KPD_voidGetPressedKey+0x1c2>
		{
			/* check four row one by one */
			DIO_u8ReadPin(KPD_DATA_PORT, KPD_ROW_ARR[Local_u8RowIndex], &Local_u8RowChek);
    135e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	ce 01       	movw	r24, r28
    1366:	41 96       	adiw	r24, 0x11	; 17
    1368:	fc 01       	movw	r30, r24
    136a:	e2 0f       	add	r30, r18
    136c:	f3 1f       	adc	r31, r19
    136e:	90 81       	ld	r25, Z
    1370:	9e 01       	movw	r18, r28
    1372:	27 5e       	subi	r18, 0xE7	; 231
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	69 2f       	mov	r22, r25
    137a:	a9 01       	movw	r20, r18
    137c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <DIO_u8ReadPin>

			/* Local_u8RowChek = LOW when press button */
			if( Local_u8RowChek == LOW )
    1380:	89 8d       	ldd	r24, Y+25	; 0x19
    1382:	88 23       	and	r24, r24
    1384:	09 f0       	breq	.+2      	; 0x1388 <KPD_voidGetPressedKey+0x94>
    1386:	94 c0       	rjmp	.+296    	; 0x14b0 <KPD_voidGetPressedKey+0x1bc>
			{
				/* take pressed key from map */
				*Copy_pu8PressedKey = KPD_u8PrivateMap[Local_u8RowIndex][Local_u8ColumnIndex];
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	48 2f       	mov	r20, r24
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	88 89       	ldd	r24, Y+16	; 0x10
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	ca 01       	movw	r24, r20
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	82 0f       	add	r24, r18
    13a0:	93 1f       	adc	r25, r19
    13a2:	fc 01       	movw	r30, r24
    13a4:	e8 59       	subi	r30, 0x98	; 152
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    13ac:	fb 8d       	ldd	r31, Y+27	; 0x1b
    13ae:	80 83       	st	Z, r24

				/* set back column to high */
				DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8ColumnIndex], HIGH);
    13b0:	88 89       	ldd	r24, Y+16	; 0x10
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	ce 01       	movw	r24, r28
    13b8:	45 96       	adiw	r24, 0x15	; 21
    13ba:	fc 01       	movw	r30, r24
    13bc:	e2 0f       	add	r30, r18
    13be:	f3 1f       	adc	r31, r19
    13c0:	90 81       	ld	r25, Z
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	69 2f       	mov	r22, r25
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	aa e7       	ldi	r26, 0x7A	; 122
    13d2:	b3 e4       	ldi	r27, 0x43	; 67
    13d4:	8b 87       	std	Y+11, r24	; 0x0b
    13d6:	9c 87       	std	Y+12, r25	; 0x0c
    13d8:	ad 87       	std	Y+13, r26	; 0x0d
    13da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13de:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4a ef       	ldi	r20, 0xFA	; 250
    13ea:	54 e4       	ldi	r21, 0x44	; 68
    13ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8f 83       	std	Y+7, r24	; 0x07
    13f6:	98 87       	std	Y+8, r25	; 0x08
    13f8:	a9 87       	std	Y+9, r26	; 0x09
    13fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <KPD_voidGetPressedKey+0x12a>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	3f c0       	rjmp	.+126    	; 0x149c <KPD_voidGetPressedKey+0x1a8>
	else if (__tmp > 65535)
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	78 85       	ldd	r23, Y+8	; 0x08
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <KPD_voidGetPressedKey+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	6b 85       	ldd	r22, Y+11	; 0x0b
    1438:	7c 85       	ldd	r23, Y+12	; 0x0c
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	9e 85       	ldd	r25, Y+14	; 0x0e
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e2       	ldi	r20, 0x20	; 32
    1444:	51 e4       	ldi	r21, 0x41	; 65
    1446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	0f c0       	rjmp	.+30     	; 0x147e <KPD_voidGetPressedKey+0x18a>
    1460:	88 ec       	ldi	r24, 0xC8	; 200
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <KPD_voidGetPressedKey+0x178>
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	69 f7       	brne	.-38     	; 0x1460 <KPD_voidGetPressedKey+0x16c>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <KPD_voidGetPressedKey+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6f 81       	ldd	r22, Y+7	; 0x07
    148a:	78 85       	ldd	r23, Y+8	; 0x08
    148c:	89 85       	ldd	r24, Y+9	; 0x09
    148e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <KPD_voidGetPressedKey+0x1b4>
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	{
		/* set one column to low */
		DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8ColumnIndex], LOW);

		/* Loop for checking rows */
		for( Local_u8RowIndex = 0; Local_u8RowIndex < 4; Local_u8RowIndex++ )
    14b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
    14b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	08 f4       	brcc	.+2      	; 0x14be <KPD_voidGetPressedKey+0x1ca>
    14bc:	50 cf       	rjmp	.-352    	; 0x135e <KPD_voidGetPressedKey+0x6a>
			 }/* if( Local_u8RowChek == LOW ) */

		 }/* end row for() */

		/* set back column to high */
		DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8ColumnIndex], HIGH);
    14be:	88 89       	ldd	r24, Y+16	; 0x10
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	ce 01       	movw	r24, r28
    14c6:	45 96       	adiw	r24, 0x15	; 21
    14c8:	fc 01       	movw	r30, r24
    14ca:	e2 0f       	add	r30, r18
    14cc:	f3 1f       	adc	r31, r19
    14ce:	90 81       	ld	r25, Z
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	69 2f       	mov	r22, r25
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	0e 94 17 0c 	call	0x182e	; 0x182e <DIO_u8SetPinValue>

	u8 Local_u8RowChek    = 1;
	*Copy_pu8PressedKey   = NOT_PRESSED;

	/* Loop for columns */
	for( Local_u8ColumnIndex = 0; Local_u8ColumnIndex < 4; Local_u8ColumnIndex++ )
    14da:	88 89       	ldd	r24, Y+16	; 0x10
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	88 8b       	std	Y+16, r24	; 0x10
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <KPD_voidGetPressedKey+0x1f4>
    14e6:	2b cf       	rjmp	.-426    	; 0x133e <KPD_voidGetPressedKey+0x4a>
		 }/* end row for() */

		/* set back column to high */
		DIO_u8SetPinValue(KPD_DATA_PORT, KPD_COLUMN_ARR[Local_u8ColumnIndex], HIGH);
	}/* end column for() loop */
}/* end function */
    14e8:	6b 96       	adiw	r28, 0x1b	; 27
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <DIO_u8SetPinDirection>:
 ** of pin and direction you want to set on this pin output/input .       **
 ** return 0 then there is false data / return 1 then there is no wrong . **
 **                                                                       **
 ***************************************************************************/
u8 DIO_u8SetPinDirection ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8Direction )
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	28 97       	sbiw	r28, 0x08	; 8
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	8a 83       	std	Y+2, r24	; 0x02
    1510:	6b 83       	std	Y+3, r22	; 0x03
    1512:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is good */
	u8 Local_u8ErrorState = 0 ;
    1514:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	09 f0       	breq	.+2      	; 0x151e <DIO_u8SetPinDirection+0x24>
    151c:	76 c0       	rjmp	.+236    	; 0x160a <DIO_u8SetPinDirection+0x110>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	08 f0       	brcs	.+2      	; 0x1526 <DIO_u8SetPinDirection+0x2c>
    1524:	72 c0       	rjmp	.+228    	; 0x160a <DIO_u8SetPinDirection+0x110>
	{
		switch( Copy_u8PortName )
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	38 87       	std	Y+8, r19	; 0x08
    152e:	2f 83       	std	Y+7, r18	; 0x07
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	98 85       	ldd	r25, Y+8	; 0x08
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	49 f1       	breq	.+82     	; 0x158c <DIO_u8SetPinDirection+0x92>
    153a:	2f 81       	ldd	r18, Y+7	; 0x07
    153c:	38 85       	ldd	r19, Y+8	; 0x08
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <DIO_u8SetPinDirection+0x54>
    1544:	8f 81       	ldd	r24, Y+7	; 0x07
    1546:	98 85       	ldd	r25, Y+8	; 0x08
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	61 f0       	breq	.+24     	; 0x1564 <DIO_u8SetPinDirection+0x6a>
    154c:	5b c0       	rjmp	.+182    	; 0x1604 <DIO_u8SetPinDirection+0x10a>
    154e:	2f 81       	ldd	r18, Y+7	; 0x07
    1550:	38 85       	ldd	r19, Y+8	; 0x08
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	71 f1       	breq	.+92     	; 0x15b4 <DIO_u8SetPinDirection+0xba>
    1558:	8f 81       	ldd	r24, Y+7	; 0x07
    155a:	98 85       	ldd	r25, Y+8	; 0x08
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	e9 f1       	breq	.+122    	; 0x15dc <DIO_u8SetPinDirection+0xe2>
    1562:	50 c0       	rjmp	.+160    	; 0x1604 <DIO_u8SetPinDirection+0x10a>
		{
		case PORT_A : SetBit( DDRA, Copy_u8PinNumber) ; break ;
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_u8SetPinDirection+0x88>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_u8SetPinDirection+0x84>
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	c0 c0       	rjmp	.+384    	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_B : SetBit( DDRB, Copy_u8PinNumber) ; break ;
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_u8SetPinDirection+0xb0>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_u8SetPinDirection+0xac>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	ac c0       	rjmp	.+344    	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_C : SetBit( DDRC, Copy_u8PinNumber) ; break ;
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_u8SetPinDirection+0xd8>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_u8SetPinDirection+0xd4>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	98 c0       	rjmp	.+304    	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_D : SetBit( DDRD, Copy_u8PinNumber) ; break ;
    15dc:	a1 e3       	ldi	r26, 0x31	; 49
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e1 e3       	ldi	r30, 0x31	; 49
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_u8SetPinDirection+0x100>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_u8SetPinDirection+0xfc>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	84 c0       	rjmp	.+264    	; 0x170c <DIO_u8SetPinDirection+0x212>
		default     : Local_u8ErrorState = 1 ;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	81 c0       	rjmp	.+258    	; 0x170c <DIO_u8SetPinDirection+0x212>
		}//end switch
	}//end if
	else if( Copy_u8Direction == INPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	88 23       	and	r24, r24
    160e:	09 f0       	breq	.+2      	; 0x1612 <DIO_u8SetPinDirection+0x118>
    1610:	7b c0       	rjmp	.+246    	; 0x1708 <DIO_u8SetPinDirection+0x20e>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	08 f0       	brcs	.+2      	; 0x161a <DIO_u8SetPinDirection+0x120>
    1618:	77 c0       	rjmp	.+238    	; 0x1708 <DIO_u8SetPinDirection+0x20e>
	{
		switch( Copy_u8PortName )
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3e 83       	std	Y+6, r19	; 0x06
    1622:	2d 83       	std	Y+5, r18	; 0x05
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	59 f1       	breq	.+86     	; 0x1684 <DIO_u8SetPinDirection+0x18a>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <DIO_u8SetPinDirection+0x148>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f0       	breq	.+26     	; 0x165a <DIO_u8SetPinDirection+0x160>
    1640:	60 c0       	rjmp	.+192    	; 0x1702 <DIO_u8SetPinDirection+0x208>
    1642:	2d 81       	ldd	r18, Y+5	; 0x05
    1644:	3e 81       	ldd	r19, Y+6	; 0x06
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	89 f1       	breq	.+98     	; 0x16ae <DIO_u8SetPinDirection+0x1b4>
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <DIO_u8SetPinDirection+0x15e>
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <DIO_u8SetPinDirection+0x1de>
    1658:	54 c0       	rjmp	.+168    	; 0x1702 <DIO_u8SetPinDirection+0x208>
		{
		case PORT_A : ClearBit( DDRA, Copy_u8PinNumber) ; break ;
    165a:	aa e3       	ldi	r26, 0x3A	; 58
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ea e3       	ldi	r30, 0x3A	; 58
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8SetPinDirection+0x17e>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8SetPinDirection+0x17a>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	44 c0       	rjmp	.+136    	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_B : ClearBit( DDRB, Copy_u8PinNumber) ; break ;
    1684:	a7 e3       	ldi	r26, 0x37	; 55
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e7 e3       	ldi	r30, 0x37	; 55
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_u8SetPinDirection+0x1a8>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_u8SetPinDirection+0x1a4>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	2f c0       	rjmp	.+94     	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_C : ClearBit( DDRC, Copy_u8PinNumber) ; break ;
    16ae:	a4 e3       	ldi	r26, 0x34	; 52
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_u8SetPinDirection+0x1d2>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_u8SetPinDirection+0x1ce>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	1a c0       	rjmp	.+52     	; 0x170c <DIO_u8SetPinDirection+0x212>
		case PORT_D : ClearBit( DDRD, Copy_u8PinNumber) ; break ;
    16d8:	a1 e3       	ldi	r26, 0x31	; 49
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e3       	ldi	r30, 0x31	; 49
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_u8SetPinDirection+0x1fc>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_u8SetPinDirection+0x1f8>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	05 c0       	rjmp	.+10     	; 0x170c <DIO_u8SetPinDirection+0x212>
		default     : Local_u8ErrorState = 1 ;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_u8SetPinDirection+0x212>
		}//end switch
	}//end else if
	else
	{
		Local_u8ErrorState = 1 ;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    170e:	28 96       	adiw	r28, 0x08	; 8
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <DIO_u8SetPortDirection>:
 ** or input                                      **
 **                                               **
 ***************************************************/

u8 DIO_u8SetPortDirection( u8 Copy_u8PortName , u8 Copy_u8Direction )
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	27 97       	sbiw	r28, 0x07	; 7
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to check inserted data is right or not */
	u8 Local_u8ErrorState = 0 ;
    1738:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT )
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	b1 f5       	brne	.+108    	; 0x17ac <DIO_u8SetPortDirection+0x8c>
	{
		switch( Copy_u8PortName )
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3f 83       	std	Y+7, r19	; 0x07
    1748:	2e 83       	std	Y+6, r18	; 0x06
    174a:	8e 81       	ldd	r24, Y+6	; 0x06
    174c:	9f 81       	ldd	r25, Y+7	; 0x07
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	d1 f0       	breq	.+52     	; 0x1788 <DIO_u8SetPortDirection+0x68>
    1754:	2e 81       	ldd	r18, Y+6	; 0x06
    1756:	3f 81       	ldd	r19, Y+7	; 0x07
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <DIO_u8SetPortDirection+0x48>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	61 f0       	breq	.+24     	; 0x177e <DIO_u8SetPortDirection+0x5e>
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <DIO_u8SetPortDirection+0x86>
    1768:	2e 81       	ldd	r18, Y+6	; 0x06
    176a:	3f 81       	ldd	r19, Y+7	; 0x07
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	81 f0       	breq	.+32     	; 0x1792 <DIO_u8SetPortDirection+0x72>
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	81 f0       	breq	.+32     	; 0x179c <DIO_u8SetPortDirection+0x7c>
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <DIO_u8SetPortDirection+0x86>
		{
		case PORT_A : DDRA = DIO_PORT_OUTPUT ; break ;
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	80 83       	st	Z, r24
    1786:	49 c0       	rjmp	.+146    	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_B : DDRB = DIO_PORT_OUTPUT ; break ;
    1788:	e7 e3       	ldi	r30, 0x37	; 55
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	80 83       	st	Z, r24
    1790:	44 c0       	rjmp	.+136    	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_C : DDRC = DIO_PORT_OUTPUT ; break ;
    1792:	e4 e3       	ldi	r30, 0x34	; 52
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	80 83       	st	Z, r24
    179a:	3f c0       	rjmp	.+126    	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_D : DDRD = DIO_PORT_OUTPUT ; break ;
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	80 83       	st	Z, r24
    17a4:	3a c0       	rjmp	.+116    	; 0x181a <DIO_u8SetPortDirection+0xfa>
		default     : Local_u8ErrorState = 1 ;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	37 c0       	rjmp	.+110    	; 0x181a <DIO_u8SetPortDirection+0xfa>
		}//end switch case
	}//end if
	else if( Copy_u8Direction == INPUT )
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 23       	and	r24, r24
    17b0:	91 f5       	brne	.+100    	; 0x1816 <DIO_u8SetPortDirection+0xf6>
	{
		switch( Copy_u8PortName )
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 83       	std	Y+5, r19	; 0x05
    17ba:	2c 83       	std	Y+4, r18	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	c9 f0       	breq	.+50     	; 0x17f8 <DIO_u8SetPortDirection+0xd8>
    17c6:	2c 81       	ldd	r18, Y+4	; 0x04
    17c8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	2c f4       	brge	.+10     	; 0x17da <DIO_u8SetPortDirection+0xba>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_u8SetPortDirection+0xd0>
    17d8:	1b c0       	rjmp	.+54     	; 0x1810 <DIO_u8SetPortDirection+0xf0>
    17da:	2c 81       	ldd	r18, Y+4	; 0x04
    17dc:	3d 81       	ldd	r19, Y+5	; 0x05
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	71 f0       	breq	.+28     	; 0x1800 <DIO_u8SetPortDirection+0xe0>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	69 f0       	breq	.+26     	; 0x1808 <DIO_u8SetPortDirection+0xe8>
    17ee:	10 c0       	rjmp	.+32     	; 0x1810 <DIO_u8SetPortDirection+0xf0>
		{
		case PORT_A : DDRA = DIO_PORT_INPUT ; break ;
    17f0:	ea e3       	ldi	r30, 0x3A	; 58
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	10 82       	st	Z, r1
    17f6:	11 c0       	rjmp	.+34     	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_B : DDRB = DIO_PORT_INPUT ; break ;
    17f8:	e7 e3       	ldi	r30, 0x37	; 55
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	10 82       	st	Z, r1
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_C : DDRC = DIO_PORT_INPUT ; break ;
    1800:	e4 e3       	ldi	r30, 0x34	; 52
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	10 82       	st	Z, r1
    1806:	09 c0       	rjmp	.+18     	; 0x181a <DIO_u8SetPortDirection+0xfa>
		case PORT_D : DDRD = DIO_PORT_INPUT ; break ;
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
    180e:	05 c0       	rjmp	.+10     	; 0x181a <DIO_u8SetPortDirection+0xfa>
		default     : Local_u8ErrorState = 1 ;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_u8SetPortDirection+0xfa>
		}//end switch case
	}//end else if
	else
	{
		Local_u8ErrorState = 1 ;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    181c:	27 96       	adiw	r28, 0x07	; 7
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <DIO_u8SetPinValue>:
 ** this function take name of port && number of pin wanted to be set && state of pin high/low  **
 **                                                                                             **
 *************************************************************************************************/

u8 DIO_u8SetPinValue     ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8PinValue )
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	28 97       	sbiw	r28, 0x08	; 8
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	6b 83       	std	Y+3, r22	; 0x03
    1846:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is right or not */
	u8 Local_u8ErrorState = 0 ;
    1848:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	88 30       	cpi	r24, 0x08	; 8
    184e:	08 f0       	brcs	.+2      	; 0x1852 <DIO_u8SetPinValue+0x24>
    1850:	f4 c0       	rjmp	.+488    	; 0x1a3a <DIO_u8SetPinValue+0x20c>
	{
		if( Copy_u8PinValue == HIGH )
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	09 f0       	breq	.+2      	; 0x185a <DIO_u8SetPinValue+0x2c>
    1858:	72 c0       	rjmp	.+228    	; 0x193e <DIO_u8SetPinValue+0x110>
		{
			switch( Copy_u8PortName )
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	38 87       	std	Y+8, r19	; 0x08
    1862:	2f 83       	std	Y+7, r18	; 0x07
    1864:	8f 81       	ldd	r24, Y+7	; 0x07
    1866:	98 85       	ldd	r25, Y+8	; 0x08
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	49 f1       	breq	.+82     	; 0x18c0 <DIO_u8SetPinValue+0x92>
    186e:	2f 81       	ldd	r18, Y+7	; 0x07
    1870:	38 85       	ldd	r19, Y+8	; 0x08
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	2c f4       	brge	.+10     	; 0x1882 <DIO_u8SetPinValue+0x54>
    1878:	8f 81       	ldd	r24, Y+7	; 0x07
    187a:	98 85       	ldd	r25, Y+8	; 0x08
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	61 f0       	breq	.+24     	; 0x1898 <DIO_u8SetPinValue+0x6a>
    1880:	5b c0       	rjmp	.+182    	; 0x1938 <DIO_u8SetPinValue+0x10a>
    1882:	2f 81       	ldd	r18, Y+7	; 0x07
    1884:	38 85       	ldd	r19, Y+8	; 0x08
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	71 f1       	breq	.+92     	; 0x18e8 <DIO_u8SetPinValue+0xba>
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	83 30       	cpi	r24, 0x03	; 3
    1892:	91 05       	cpc	r25, r1
    1894:	e9 f1       	breq	.+122    	; 0x1910 <DIO_u8SetPinValue+0xe2>
    1896:	50 c0       	rjmp	.+160    	; 0x1938 <DIO_u8SetPinValue+0x10a>
			{
			case PORT_A : SetBit( PORTA , Copy_u8PinNumber ) ; break ;
    1898:	ab e3       	ldi	r26, 0x3B	; 59
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	eb e3       	ldi	r30, 0x3B	; 59
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_u8SetPinValue+0x88>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_u8SetPinValue+0x84>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	bf c0       	rjmp	.+382    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_B : SetBit( PORTB , Copy_u8PinNumber ) ; break ;
    18c0:	a8 e3       	ldi	r26, 0x38	; 56
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e8 e3       	ldi	r30, 0x38	; 56
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_u8SetPinValue+0xb0>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_u8SetPinValue+0xac>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	ab c0       	rjmp	.+342    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_C : SetBit( PORTC , Copy_u8PinNumber ) ; break ;
    18e8:	a5 e3       	ldi	r26, 0x35	; 53
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_u8SetPinValue+0xd8>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_u8SetPinValue+0xd4>
    190a:	84 2b       	or	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	97 c0       	rjmp	.+302    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_D : SetBit( PORTD , Copy_u8PinNumber ) ; break ;
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_u8SetPinValue+0x100>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_u8SetPinValue+0xfc>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	83 c0       	rjmp	.+262    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			default     : Local_u8ErrorState = 1 ;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	80 c0       	rjmp	.+256    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			}//end first switch
		}//end first inner if
		else if( Copy_u8PinValue == LOW )
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	88 23       	and	r24, r24
    1942:	09 f0       	breq	.+2      	; 0x1946 <DIO_u8SetPinValue+0x118>
    1944:	77 c0       	rjmp	.+238    	; 0x1a34 <DIO_u8SetPinValue+0x206>
		{
			switch( Copy_u8PortName )
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3e 83       	std	Y+6, r19	; 0x06
    194e:	2d 83       	std	Y+5, r18	; 0x05
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	59 f1       	breq	.+86     	; 0x19b0 <DIO_u8SetPinValue+0x182>
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	3e 81       	ldd	r19, Y+6	; 0x06
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <DIO_u8SetPinValue+0x140>
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	69 f0       	breq	.+26     	; 0x1986 <DIO_u8SetPinValue+0x158>
    196c:	60 c0       	rjmp	.+192    	; 0x1a2e <DIO_u8SetPinValue+0x200>
    196e:	2d 81       	ldd	r18, Y+5	; 0x05
    1970:	3e 81       	ldd	r19, Y+6	; 0x06
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	89 f1       	breq	.+98     	; 0x19da <DIO_u8SetPinValue+0x1ac>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <DIO_u8SetPinValue+0x156>
    1982:	40 c0       	rjmp	.+128    	; 0x1a04 <DIO_u8SetPinValue+0x1d6>
    1984:	54 c0       	rjmp	.+168    	; 0x1a2e <DIO_u8SetPinValue+0x200>
			{
			case PORT_A : ClearBit( PORTA , Copy_u8PinNumber ) ; break ;
    1986:	ab e3       	ldi	r26, 0x3B	; 59
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e3       	ldi	r30, 0x3B	; 59
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <DIO_u8SetPinValue+0x176>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <DIO_u8SetPinValue+0x172>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	47 c0       	rjmp	.+142    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_B : ClearBit( PORTB , Copy_u8PinNumber ) ; break ;
    19b0:	a8 e3       	ldi	r26, 0x38	; 56
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e8 e3       	ldi	r30, 0x38	; 56
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_u8SetPinValue+0x1a0>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_u8SetPinValue+0x19c>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	32 c0       	rjmp	.+100    	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_C : ClearBit( PORTC , Copy_u8PinNumber ) ; break ;
    19da:	a5 e3       	ldi	r26, 0x35	; 53
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e5 e3       	ldi	r30, 0x35	; 53
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_u8SetPinValue+0x1ca>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_u8SetPinValue+0x1c6>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	1d c0       	rjmp	.+58     	; 0x1a3e <DIO_u8SetPinValue+0x210>
			case PORT_D : ClearBit( PORTD , Copy_u8PinNumber ) ; break ;
    1a04:	a2 e3       	ldi	r26, 0x32	; 50
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e2 e3       	ldi	r30, 0x32	; 50
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_u8SetPinValue+0x1f4>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_u8SetPinValue+0x1f0>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <DIO_u8SetPinValue+0x210>
			default     : Local_u8ErrorState = 1 ;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	05 c0       	rjmp	.+10     	; 0x1a3e <DIO_u8SetPinValue+0x210>
			}//end second switch
		}//end second else if of inner if
		else
		{
			Local_u8ErrorState = 1 ;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_u8SetPinValue+0x210>
		}//end else of inner if
	}//end outer if
	else
	{
		Local_u8ErrorState = 1 ;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	}//end else of outer if
	return Local_u8ErrorState ;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1a40:	28 96       	adiw	r28, 0x08	; 8
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <DIO_u8SetPortValue>:
 ** the selected port                                    **
 **                                                      **
 **********************************************************/

u8 DIO_u8SetPortValue    ( u8 Copy_u8PortName , u8 Copy_u8PortValue )
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <DIO_u8SetPortValue+0x6>
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <DIO_u8SetPortValue+0x8>
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    1a62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0 ;
    1a64:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortValue >= 0 && Copy_u8PortValue <= 255  )
	{
		switch( Copy_u8PortName )
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	d1 f0       	breq	.+52     	; 0x1aae <DIO_u8SetPortValue+0x5c>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <DIO_u8SetPortValue+0x3c>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <DIO_u8SetPortValue+0x52>
    1a8c:	1f c0       	rjmp	.+62     	; 0x1acc <DIO_u8SetPortValue+0x7a>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	81 f0       	breq	.+32     	; 0x1ab8 <DIO_u8SetPortValue+0x66>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <DIO_u8SetPortValue+0x70>
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A : PORTA = Copy_u8PortValue ; break ;
    1aa4:	eb e3       	ldi	r30, 0x3B	; 59
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	80 83       	st	Z, r24
    1aac:	11 c0       	rjmp	.+34     	; 0x1ad0 <DIO_u8SetPortValue+0x7e>
		case PORT_B : PORTB = Copy_u8PortValue ; break ;
    1aae:	e8 e3       	ldi	r30, 0x38	; 56
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	80 83       	st	Z, r24
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <DIO_u8SetPortValue+0x7e>
		case PORT_C : PORTC = Copy_u8PortValue ; break ;
    1ab8:	e5 e3       	ldi	r30, 0x35	; 53
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	80 83       	st	Z, r24
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <DIO_u8SetPortValue+0x7e>
		case PORT_D : PORTD = Copy_u8PortValue ; break ;
    1ac2:	e2 e3       	ldi	r30, 0x32	; 50
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	80 83       	st	Z, r24
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_u8SetPortValue+0x7e>
		default     : Local_u8ErrorState = 1 ;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
	}//end if
	else
	{
		Local_u8ErrorState = 1 ;
	}//end else
    return Local_u8ErrorState ;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <DIO_u8ReadPin>:
 ** this function take port name && number of pin you want to read && pointer to hold read value. **
 **                                                                                               **
 ***************************************************************************************************/

u8 DIO_u8ReadPin         ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8* Copy_pu8ReadedValue )
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	27 97       	sbiw	r28, 0x07	; 7
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	6b 83       	std	Y+3, r22	; 0x03
    1afa:	5d 83       	std	Y+5, r21	; 0x05
    1afc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    1afe:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <DIO_u8ReadPin+0x26>
    1b06:	74 c0       	rjmp	.+232    	; 0x1bf0 <DIO_u8ReadPin+0x10e>
	{
		switch( Copy_u8PortName )
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3f 83       	std	Y+7, r19	; 0x07
    1b10:	2e 83       	std	Y+6, r18	; 0x06
    1b12:	4e 81       	ldd	r20, Y+6	; 0x06
    1b14:	5f 81       	ldd	r21, Y+7	; 0x07
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	51 05       	cpc	r21, r1
    1b1a:	59 f1       	breq	.+86     	; 0x1b72 <DIO_u8ReadPin+0x90>
    1b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	91 05       	cpc	r25, r1
    1b24:	34 f4       	brge	.+12     	; 0x1b32 <DIO_u8ReadPin+0x50>
    1b26:	2e 81       	ldd	r18, Y+6	; 0x06
    1b28:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2a:	21 15       	cp	r18, r1
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	69 f0       	breq	.+26     	; 0x1b4a <DIO_u8ReadPin+0x68>
    1b30:	5c c0       	rjmp	.+184    	; 0x1bea <DIO_u8ReadPin+0x108>
    1b32:	4e 81       	ldd	r20, Y+6	; 0x06
    1b34:	5f 81       	ldd	r21, Y+7	; 0x07
    1b36:	42 30       	cpi	r20, 0x02	; 2
    1b38:	51 05       	cpc	r21, r1
    1b3a:	79 f1       	breq	.+94     	; 0x1b9a <DIO_u8ReadPin+0xb8>
    1b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <DIO_u8ReadPin+0x66>
    1b46:	3d c0       	rjmp	.+122    	; 0x1bc2 <DIO_u8ReadPin+0xe0>
    1b48:	50 c0       	rjmp	.+160    	; 0x1bea <DIO_u8ReadPin+0x108>
		{
		case PORT_A : *Copy_pu8ReadedValue = GetBit( PINA , Copy_u8PinNumber ) ; break ;
    1b4a:	e9 e3       	ldi	r30, 0x39	; 57
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_u8ReadPin+0x80>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_u8ReadPin+0x7c>
    1b66:	ca 01       	movw	r24, r20
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b6e:	80 83       	st	Z, r24
    1b70:	41 c0       	rjmp	.+130    	; 0x1bf4 <DIO_u8ReadPin+0x112>
		case PORT_B : *Copy_pu8ReadedValue = GetBit( PINB , Copy_u8PinNumber ) ; break ;
    1b72:	e6 e3       	ldi	r30, 0x36	; 54
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_u8ReadPin+0xa8>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_u8ReadPin+0xa4>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	ec 81       	ldd	r30, Y+4	; 0x04
    1b94:	fd 81       	ldd	r31, Y+5	; 0x05
    1b96:	80 83       	st	Z, r24
    1b98:	2d c0       	rjmp	.+90     	; 0x1bf4 <DIO_u8ReadPin+0x112>
		case PORT_C : *Copy_pu8ReadedValue = GetBit( PINC , Copy_u8PinNumber ) ; break ;
    1b9a:	e3 e3       	ldi	r30, 0x33	; 51
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_u8ReadPin+0xd0>
    1bae:	55 95       	asr	r21
    1bb0:	47 95       	ror	r20
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_u8ReadPin+0xcc>
    1bb6:	ca 01       	movw	r24, r20
    1bb8:	81 70       	andi	r24, 0x01	; 1
    1bba:	ec 81       	ldd	r30, Y+4	; 0x04
    1bbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1bbe:	80 83       	st	Z, r24
    1bc0:	19 c0       	rjmp	.+50     	; 0x1bf4 <DIO_u8ReadPin+0x112>
		case PORT_D : *Copy_pu8ReadedValue = GetBit( PIND , Copy_u8PinNumber ) ; break ;
    1bc2:	e0 e3       	ldi	r30, 0x30	; 48
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	a9 01       	movw	r20, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_u8ReadPin+0xf8>
    1bd6:	55 95       	asr	r21
    1bd8:	47 95       	ror	r20
    1bda:	8a 95       	dec	r24
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_u8ReadPin+0xf4>
    1bde:	ca 01       	movw	r24, r20
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	ec 81       	ldd	r30, Y+4	; 0x04
    1be4:	fd 81       	ldd	r31, Y+5	; 0x05
    1be6:	80 83       	st	Z, r24
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <DIO_u8ReadPin+0x112>
		default     :  Local_u8ErrorState = 1 ;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8ReadPin+0x112>
		}//end switch
	}//end if
	else
	{
		Local_u8ErrorState = 1 ;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	}//end else
	return Local_u8ErrorState ;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1bf6:	27 96       	adiw	r28, 0x07	; 7
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <DIO_u8ReadPort>:
 ** take name of port && pointer to hold value **
 **                                            **
 ************************************************/

u8 DIO_u8ReadPort        ( u8 Copy_u8PortName , u8* Copy_pu8PortValue)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <DIO_u8ReadPort+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <DIO_u8ReadPort+0x8>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <DIO_u8ReadPort+0xa>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	7c 83       	std	Y+4, r23	; 0x04
    1c1a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8NoError = 0 ;
    1c1c:	19 82       	std	Y+1, r1	; 0x01
	switch( Copy_u8PortName )
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3e 83       	std	Y+6, r19	; 0x06
    1c26:	2d 83       	std	Y+5, r18	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	e1 f0       	breq	.+56     	; 0x1c6a <DIO_u8ReadPort+0x62>
    1c32:	2d 81       	ldd	r18, Y+5	; 0x05
    1c34:	3e 81       	ldd	r19, Y+6	; 0x06
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <DIO_u8ReadPort+0x3e>
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	61 f0       	breq	.+24     	; 0x1c5c <DIO_u8ReadPort+0x54>
    1c44:	27 c0       	rjmp	.+78     	; 0x1c94 <DIO_u8ReadPort+0x8c>
    1c46:	2d 81       	ldd	r18, Y+5	; 0x05
    1c48:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4a:	22 30       	cpi	r18, 0x02	; 2
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	a1 f0       	breq	.+40     	; 0x1c78 <DIO_u8ReadPort+0x70>
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	b1 f0       	breq	.+44     	; 0x1c86 <DIO_u8ReadPort+0x7e>
    1c5a:	1c c0       	rjmp	.+56     	; 0x1c94 <DIO_u8ReadPort+0x8c>
	{
	case PORT_A : *Copy_pu8PortValue = PINA ; break ;
    1c5c:	e9 e3       	ldi	r30, 0x39	; 57
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	eb 81       	ldd	r30, Y+3	; 0x03
    1c64:	fc 81       	ldd	r31, Y+4	; 0x04
    1c66:	80 83       	st	Z, r24
    1c68:	17 c0       	rjmp	.+46     	; 0x1c98 <DIO_u8ReadPort+0x90>
	case PORT_B : *Copy_pu8PortValue = PINB ; break ;
    1c6a:	e6 e3       	ldi	r30, 0x36	; 54
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	eb 81       	ldd	r30, Y+3	; 0x03
    1c72:	fc 81       	ldd	r31, Y+4	; 0x04
    1c74:	80 83       	st	Z, r24
    1c76:	10 c0       	rjmp	.+32     	; 0x1c98 <DIO_u8ReadPort+0x90>
	case PORT_C : *Copy_pu8PortValue = PINC ; break ;
    1c78:	e3 e3       	ldi	r30, 0x33	; 51
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c80:	fc 81       	ldd	r31, Y+4	; 0x04
    1c82:	80 83       	st	Z, r24
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <DIO_u8ReadPort+0x90>
	case PORT_D : *Copy_pu8PortValue = PIND ; break ;
    1c86:	e0 e3       	ldi	r30, 0x30	; 48
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c90:	80 83       	st	Z, r24
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_u8ReadPort+0x90>
	default     : Local_u8NoError = 1 ;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01
	}//end switch case
	return Local_u8NoError ;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1c9a:	26 96       	adiw	r28, 0x06	; 6
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <main>:

#include "1-MCAL/1-DIO/DIO_interface.h"


void main( void )
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	/* initiate direction of pins of LCD */
	DIO_u8SetPortDirection(LCD_DATA_PORT, OUTPUT);
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	65 e0       	ldi	r22, 0x05	; 5
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	66 e0       	ldi	r22, 0x06	; 6
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_ENABLE_PIN, OUTPUT);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	67 e0       	ldi	r22, 0x07	; 7
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <DIO_u8SetPinDirection>

	/* call initiate function */
	LCD_voidInit() ;
    1cdc:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_voidInit>
	KPD_voidInit() ;
    1ce0:	0e 94 0f 09 	call	0x121e	; 0x121e <KPD_voidInit>

	u8 Local_u8Key ;

	while(1)
	{
		KPD_voidGetPressedKey( &Local_u8Key );
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <KPD_voidGetPressedKey>
		if( Local_u8Key != NOT_PRESSED )
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	85 36       	cpi	r24, 0x65	; 101
    1cf0:	c9 f3       	breq	.-14     	; 0x1ce4 <main+0x38>
		{
			LCD_voidPrintChar( Local_u8Key );
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_voidPrintChar>
    1cf8:	f5 cf       	rjmp	.-22     	; 0x1ce4 <main+0x38>

00001cfa <__udivmodsi4>:
    1cfa:	a1 e2       	ldi	r26, 0x21	; 33
    1cfc:	1a 2e       	mov	r1, r26
    1cfe:	aa 1b       	sub	r26, r26
    1d00:	bb 1b       	sub	r27, r27
    1d02:	fd 01       	movw	r30, r26
    1d04:	0d c0       	rjmp	.+26     	; 0x1d20 <__udivmodsi4_ep>

00001d06 <__udivmodsi4_loop>:
    1d06:	aa 1f       	adc	r26, r26
    1d08:	bb 1f       	adc	r27, r27
    1d0a:	ee 1f       	adc	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	a2 17       	cp	r26, r18
    1d10:	b3 07       	cpc	r27, r19
    1d12:	e4 07       	cpc	r30, r20
    1d14:	f5 07       	cpc	r31, r21
    1d16:	20 f0       	brcs	.+8      	; 0x1d20 <__udivmodsi4_ep>
    1d18:	a2 1b       	sub	r26, r18
    1d1a:	b3 0b       	sbc	r27, r19
    1d1c:	e4 0b       	sbc	r30, r20
    1d1e:	f5 0b       	sbc	r31, r21

00001d20 <__udivmodsi4_ep>:
    1d20:	66 1f       	adc	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	88 1f       	adc	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	1a 94       	dec	r1
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <__udivmodsi4_loop>
    1d2c:	60 95       	com	r22
    1d2e:	70 95       	com	r23
    1d30:	80 95       	com	r24
    1d32:	90 95       	com	r25
    1d34:	9b 01       	movw	r18, r22
    1d36:	ac 01       	movw	r20, r24
    1d38:	bd 01       	movw	r22, r26
    1d3a:	cf 01       	movw	r24, r30
    1d3c:	08 95       	ret

00001d3e <__prologue_saves__>:
    1d3e:	2f 92       	push	r2
    1d40:	3f 92       	push	r3
    1d42:	4f 92       	push	r4
    1d44:	5f 92       	push	r5
    1d46:	6f 92       	push	r6
    1d48:	7f 92       	push	r7
    1d4a:	8f 92       	push	r8
    1d4c:	9f 92       	push	r9
    1d4e:	af 92       	push	r10
    1d50:	bf 92       	push	r11
    1d52:	cf 92       	push	r12
    1d54:	df 92       	push	r13
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	ca 1b       	sub	r28, r26
    1d68:	db 0b       	sbc	r29, r27
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	09 94       	ijmp

00001d76 <__epilogue_restores__>:
    1d76:	2a 88       	ldd	r2, Y+18	; 0x12
    1d78:	39 88       	ldd	r3, Y+17	; 0x11
    1d7a:	48 88       	ldd	r4, Y+16	; 0x10
    1d7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d88:	b9 84       	ldd	r11, Y+9	; 0x09
    1d8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d8c:	df 80       	ldd	r13, Y+7	; 0x07
    1d8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1d90:	fd 80       	ldd	r15, Y+5	; 0x05
    1d92:	0c 81       	ldd	r16, Y+4	; 0x04
    1d94:	1b 81       	ldd	r17, Y+3	; 0x03
    1d96:	aa 81       	ldd	r26, Y+2	; 0x02
    1d98:	b9 81       	ldd	r27, Y+1	; 0x01
    1d9a:	ce 0f       	add	r28, r30
    1d9c:	d1 1d       	adc	r29, r1
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	ed 01       	movw	r28, r26
    1daa:	08 95       	ret

00001dac <_exit>:
    1dac:	f8 94       	cli

00001dae <__stop_program>:
    1dae:	ff cf       	rjmp	.-2      	; 0x1dae <__stop_program>
