
02_Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000888  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004fe  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  64:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:
 * of pin and direction you want to set on this pin output/input .
 * return 0 then there is false data / return 1 then there is no wrong .
 *
 */
u8 DIO_u8SetPinDirection ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8Direction )
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is good */
	u8 Local_u8NoError = 0 ;
  86:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinDirection+0x24>
  8e:	77 c0       	rjmp	.+238    	; 0x17e <DIO_u8SetPinDirection+0x112>
  90:	8b 81       	ldd	r24, Y+3	; 0x03
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8SetPinDirection+0x2c>
  96:	73 c0       	rjmp	.+230    	; 0x17e <DIO_u8SetPinDirection+0x112>
	{
		Local_u8NoError = 1 ;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8PortName )
  9c:	8a 81       	ldd	r24, Y+2	; 0x02
  9e:	28 2f       	mov	r18, r24
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	38 87       	std	Y+8, r19	; 0x08
  a4:	2f 83       	std	Y+7, r18	; 0x07
  a6:	8f 81       	ldd	r24, Y+7	; 0x07
  a8:	98 85       	ldd	r25, Y+8	; 0x08
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	91 05       	cpc	r25, r1
  ae:	49 f1       	breq	.+82     	; 0x102 <DIO_u8SetPinDirection+0x96>
  b0:	2f 81       	ldd	r18, Y+7	; 0x07
  b2:	38 85       	ldd	r19, Y+8	; 0x08
  b4:	22 30       	cpi	r18, 0x02	; 2
  b6:	31 05       	cpc	r19, r1
  b8:	2c f4       	brge	.+10     	; 0xc4 <DIO_u8SetPinDirection+0x58>
  ba:	8f 81       	ldd	r24, Y+7	; 0x07
  bc:	98 85       	ldd	r25, Y+8	; 0x08
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	61 f0       	breq	.+24     	; 0xda <DIO_u8SetPinDirection+0x6e>
  c2:	5b c0       	rjmp	.+182    	; 0x17a <DIO_u8SetPinDirection+0x10e>
  c4:	2f 81       	ldd	r18, Y+7	; 0x07
  c6:	38 85       	ldd	r19, Y+8	; 0x08
  c8:	22 30       	cpi	r18, 0x02	; 2
  ca:	31 05       	cpc	r19, r1
  cc:	71 f1       	breq	.+92     	; 0x12a <DIO_u8SetPinDirection+0xbe>
  ce:	8f 81       	ldd	r24, Y+7	; 0x07
  d0:	98 85       	ldd	r25, Y+8	; 0x08
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	91 05       	cpc	r25, r1
  d6:	e9 f1       	breq	.+122    	; 0x152 <DIO_u8SetPinDirection+0xe6>
  d8:	50 c0       	rjmp	.+160    	; 0x17a <DIO_u8SetPinDirection+0x10e>
		{
		case PORT_A : SetBit( DDRA, Copy_u8PinNumber) ; break ;
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_u8SetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_u8SetPinDirection+0x88>
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
 100:	bd c0       	rjmp	.+378    	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_B : SetBit( DDRB, Copy_u8PinNumber) ; break ;
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_u8SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_u8SetPinDirection+0xb0>
 124:	84 2b       	or	r24, r20
 126:	8c 93       	st	X, r24
 128:	a9 c0       	rjmp	.+338    	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_C : SetBit( DDRC, Copy_u8PinNumber) ; break ;
 12a:	a4 e3       	ldi	r26, 0x34	; 52
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e4 e3       	ldi	r30, 0x34	; 52
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_u8SetPinDirection+0xdc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_u8SetPinDirection+0xd8>
 14c:	84 2b       	or	r24, r20
 14e:	8c 93       	st	X, r24
 150:	95 c0       	rjmp	.+298    	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_D : SetBit( DDRD, Copy_u8PinNumber) ; break ;
 152:	a1 e3       	ldi	r26, 0x31	; 49
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e1 e3       	ldi	r30, 0x31	; 49
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinDirection+0x104>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinDirection+0x100>
 174:	84 2b       	or	r24, r20
 176:	8c 93       	st	X, r24
 178:	81 c0       	rjmp	.+258    	; 0x27c <DIO_u8SetPinDirection+0x210>
		default     : Local_u8NoError = 0 ;
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	7f c0       	rjmp	.+254    	; 0x27c <DIO_u8SetPinDirection+0x210>
		}//end switch
	}//end if
	else if( Copy_u8Direction == INPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	88 23       	and	r24, r24
 182:	09 f0       	breq	.+2      	; 0x186 <DIO_u8SetPinDirection+0x11a>
 184:	7b c0       	rjmp	.+246    	; 0x27c <DIO_u8SetPinDirection+0x210>
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	88 30       	cpi	r24, 0x08	; 8
 18a:	08 f0       	brcs	.+2      	; 0x18e <DIO_u8SetPinDirection+0x122>
 18c:	77 c0       	rjmp	.+238    	; 0x27c <DIO_u8SetPinDirection+0x210>
	{
		Local_u8NoError = 1 ;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8PortName )
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	3e 83       	std	Y+6, r19	; 0x06
 19a:	2d 83       	std	Y+5, r18	; 0x05
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 05       	cpc	r25, r1
 1a4:	59 f1       	breq	.+86     	; 0x1fc <DIO_u8SetPinDirection+0x190>
 1a6:	2d 81       	ldd	r18, Y+5	; 0x05
 1a8:	3e 81       	ldd	r19, Y+6	; 0x06
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	31 05       	cpc	r19, r1
 1ae:	2c f4       	brge	.+10     	; 0x1ba <DIO_u8SetPinDirection+0x14e>
 1b0:	8d 81       	ldd	r24, Y+5	; 0x05
 1b2:	9e 81       	ldd	r25, Y+6	; 0x06
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	69 f0       	breq	.+26     	; 0x1d2 <DIO_u8SetPinDirection+0x166>
 1b8:	60 c0       	rjmp	.+192    	; 0x27a <DIO_u8SetPinDirection+0x20e>
 1ba:	2d 81       	ldd	r18, Y+5	; 0x05
 1bc:	3e 81       	ldd	r19, Y+6	; 0x06
 1be:	22 30       	cpi	r18, 0x02	; 2
 1c0:	31 05       	cpc	r19, r1
 1c2:	89 f1       	breq	.+98     	; 0x226 <DIO_u8SetPinDirection+0x1ba>
 1c4:	8d 81       	ldd	r24, Y+5	; 0x05
 1c6:	9e 81       	ldd	r25, Y+6	; 0x06
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_u8SetPinDirection+0x164>
 1ce:	40 c0       	rjmp	.+128    	; 0x250 <DIO_u8SetPinDirection+0x1e4>
 1d0:	54 c0       	rjmp	.+168    	; 0x27a <DIO_u8SetPinDirection+0x20e>
		{
		case PORT_A : ClearBit( DDRA, Copy_u8PinNumber) ; break ;
 1d2:	aa e3       	ldi	r26, 0x3A	; 58
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	ea e3       	ldi	r30, 0x3A	; 58
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinDirection+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinDirection+0x180>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	40 c0       	rjmp	.+128    	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_B : ClearBit( DDRB, Copy_u8PinNumber) ; break ;
 1fc:	a7 e3       	ldi	r26, 0x37	; 55
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e7 e3       	ldi	r30, 0x37	; 55
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_u8SetPinDirection+0x1ae>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_u8SetPinDirection+0x1aa>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	8c 93       	st	X, r24
 224:	2b c0       	rjmp	.+86     	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_C : ClearBit( DDRC, Copy_u8PinNumber) ; break ;
 226:	a4 e3       	ldi	r26, 0x34	; 52
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e4 e3       	ldi	r30, 0x34	; 52
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_u8SetPinDirection+0x1d8>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_u8SetPinDirection+0x1d4>
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	8c 93       	st	X, r24
 24e:	16 c0       	rjmp	.+44     	; 0x27c <DIO_u8SetPinDirection+0x210>
		case PORT_D : ClearBit( DDRD, Copy_u8PinNumber) ; break ;
 250:	a1 e3       	ldi	r26, 0x31	; 49
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e1 e3       	ldi	r30, 0x31	; 49
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinDirection+0x202>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_u8SetPinDirection+0x1fe>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
 278:	01 c0       	rjmp	.+2      	; 0x27c <DIO_u8SetPinDirection+0x210>
		default     : Local_u8NoError = 0 ;
 27a:	19 82       	std	Y+1, r1	; 0x01
		}//end switch
	}//end else if
	return Local_u8NoError ;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_u8SetPortDirection>:
 * this function set the selected port to output
 * or input
 */

u8 DIO_u8SetPortDirection( u8 Copy_u8PortName , u8 Copy_u8Direction )
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	27 97       	sbiw	r28, 0x07	; 7
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	8a 83       	std	Y+2, r24	; 0x02
 2a6:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to check inserted data is right or not */
	u8 Local_u8NoError = 0 ;
 2a8:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT )
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	b9 f5       	brne	.+110    	; 0x31e <DIO_u8SetPortDirection+0x8e>
	{
		Local_u8NoError = 1 ;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8PortName )
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3f 83       	std	Y+7, r19	; 0x07
 2bc:	2e 83       	std	Y+6, r18	; 0x06
 2be:	8e 81       	ldd	r24, Y+6	; 0x06
 2c0:	9f 81       	ldd	r25, Y+7	; 0x07
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortDirection+0x6c>
 2c8:	2e 81       	ldd	r18, Y+6	; 0x06
 2ca:	3f 81       	ldd	r19, Y+7	; 0x07
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortDirection+0x4c>
 2d2:	8e 81       	ldd	r24, Y+6	; 0x06
 2d4:	9f 81       	ldd	r25, Y+7	; 0x07
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortDirection+0x62>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortDirection+0x8a>
 2dc:	2e 81       	ldd	r18, Y+6	; 0x06
 2de:	3f 81       	ldd	r19, Y+7	; 0x07
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortDirection+0x76>
 2e6:	8e 81       	ldd	r24, Y+6	; 0x06
 2e8:	9f 81       	ldd	r25, Y+7	; 0x07
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortDirection+0x80>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortDirection+0x8a>
		{
		case PORT_A : DDRA = 0xff ; break ;
 2f2:	ea e3       	ldi	r30, 0x3A	; 58
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	80 83       	st	Z, r24
 2fa:	46 c0       	rjmp	.+140    	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_B : DDRB = 0xff ; break ;
 2fc:	e7 e3       	ldi	r30, 0x37	; 55
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	80 83       	st	Z, r24
 304:	41 c0       	rjmp	.+130    	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_C : DDRC = 0xff ; break ;
 306:	e4 e3       	ldi	r30, 0x34	; 52
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 83       	st	Z, r24
 30e:	3c c0       	rjmp	.+120    	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_D : DDRD = 0xff ; break ;
 310:	e1 e3       	ldi	r30, 0x31	; 49
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	80 83       	st	Z, r24
 318:	37 c0       	rjmp	.+110    	; 0x388 <DIO_u8SetPortDirection+0xf8>
		default     : Local_u8NoError = 0 ;
 31a:	19 82       	std	Y+1, r1	; 0x01
 31c:	35 c0       	rjmp	.+106    	; 0x388 <DIO_u8SetPortDirection+0xf8>
		}//end switch case
	}//end if

	else if( Copy_u8Direction == INPUT )
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	88 23       	and	r24, r24
 322:	91 f5       	brne	.+100    	; 0x388 <DIO_u8SetPortDirection+0xf8>
	{
		Local_u8NoError = 1 ;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8PortName )
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	3d 83       	std	Y+5, r19	; 0x05
 330:	2c 83       	std	Y+4, r18	; 0x04
 332:	8c 81       	ldd	r24, Y+4	; 0x04
 334:	9d 81       	ldd	r25, Y+5	; 0x05
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	91 05       	cpc	r25, r1
 33a:	c9 f0       	breq	.+50     	; 0x36e <DIO_u8SetPortDirection+0xde>
 33c:	2c 81       	ldd	r18, Y+4	; 0x04
 33e:	3d 81       	ldd	r19, Y+5	; 0x05
 340:	22 30       	cpi	r18, 0x02	; 2
 342:	31 05       	cpc	r19, r1
 344:	2c f4       	brge	.+10     	; 0x350 <DIO_u8SetPortDirection+0xc0>
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	9d 81       	ldd	r25, Y+5	; 0x05
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	61 f0       	breq	.+24     	; 0x366 <DIO_u8SetPortDirection+0xd6>
 34e:	1b c0       	rjmp	.+54     	; 0x386 <DIO_u8SetPortDirection+0xf6>
 350:	2c 81       	ldd	r18, Y+4	; 0x04
 352:	3d 81       	ldd	r19, Y+5	; 0x05
 354:	22 30       	cpi	r18, 0x02	; 2
 356:	31 05       	cpc	r19, r1
 358:	71 f0       	breq	.+28     	; 0x376 <DIO_u8SetPortDirection+0xe6>
 35a:	8c 81       	ldd	r24, Y+4	; 0x04
 35c:	9d 81       	ldd	r25, Y+5	; 0x05
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	91 05       	cpc	r25, r1
 362:	69 f0       	breq	.+26     	; 0x37e <DIO_u8SetPortDirection+0xee>
 364:	10 c0       	rjmp	.+32     	; 0x386 <DIO_u8SetPortDirection+0xf6>
		{
		case PORT_A : DDRA = 0x00 ; break ;
 366:	ea e3       	ldi	r30, 0x3A	; 58
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	10 82       	st	Z, r1
 36c:	0d c0       	rjmp	.+26     	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_B : DDRB = 0x00 ; break ;
 36e:	e7 e3       	ldi	r30, 0x37	; 55
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	10 82       	st	Z, r1
 374:	09 c0       	rjmp	.+18     	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_C : DDRC = 0x00 ; break ;
 376:	e4 e3       	ldi	r30, 0x34	; 52
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	10 82       	st	Z, r1
 37c:	05 c0       	rjmp	.+10     	; 0x388 <DIO_u8SetPortDirection+0xf8>
		case PORT_D : DDRD = 0x00 ; break ;
 37e:	e1 e3       	ldi	r30, 0x31	; 49
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	10 82       	st	Z, r1
 384:	01 c0       	rjmp	.+2      	; 0x388 <DIO_u8SetPortDirection+0xf8>
		default     : Local_u8NoError = 0 ;
 386:	19 82       	std	Y+1, r1	; 0x01
		}//end switch case
	}//end else if
	return Local_u8NoError ;
 388:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
 38a:	27 96       	adiw	r28, 0x07	; 7
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	cf 91       	pop	r28
 398:	df 91       	pop	r29
 39a:	08 95       	ret

0000039c <DIO_u8SetPinValue>:
 * this function take name of port && number of pin wanted to be set && state of pin high/low
 *
 */

u8 DIO_u8SetPinValue     ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8PinValue )
{
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	28 97       	sbiw	r28, 0x08	; 8
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	8a 83       	std	Y+2, r24	; 0x02
 3b2:	6b 83       	std	Y+3, r22	; 0x03
 3b4:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is right or not */
	u8 Local_u8NoError = 0 ;
 3b6:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	08 f0       	brcs	.+2      	; 0x3c0 <DIO_u8SetPinValue+0x24>
 3be:	f2 c0       	rjmp	.+484    	; 0x5a4 <DIO_u8SetPinValue+0x208>
	{
		if( Copy_u8PinValue == HIGH )
 3c0:	8c 81       	ldd	r24, Y+4	; 0x04
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_u8SetPinValue+0x2c>
 3c6:	73 c0       	rjmp	.+230    	; 0x4ae <DIO_u8SetPinValue+0x112>
		{
			Local_u8NoError = 1 ;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	89 83       	std	Y+1, r24	; 0x01

			switch( Copy_u8PortName )
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	38 87       	std	Y+8, r19	; 0x08
 3d4:	2f 83       	std	Y+7, r18	; 0x07
 3d6:	8f 81       	ldd	r24, Y+7	; 0x07
 3d8:	98 85       	ldd	r25, Y+8	; 0x08
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 05       	cpc	r25, r1
 3de:	49 f1       	breq	.+82     	; 0x432 <DIO_u8SetPinValue+0x96>
 3e0:	2f 81       	ldd	r18, Y+7	; 0x07
 3e2:	38 85       	ldd	r19, Y+8	; 0x08
 3e4:	22 30       	cpi	r18, 0x02	; 2
 3e6:	31 05       	cpc	r19, r1
 3e8:	2c f4       	brge	.+10     	; 0x3f4 <DIO_u8SetPinValue+0x58>
 3ea:	8f 81       	ldd	r24, Y+7	; 0x07
 3ec:	98 85       	ldd	r25, Y+8	; 0x08
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	61 f0       	breq	.+24     	; 0x40a <DIO_u8SetPinValue+0x6e>
 3f2:	5b c0       	rjmp	.+182    	; 0x4aa <DIO_u8SetPinValue+0x10e>
 3f4:	2f 81       	ldd	r18, Y+7	; 0x07
 3f6:	38 85       	ldd	r19, Y+8	; 0x08
 3f8:	22 30       	cpi	r18, 0x02	; 2
 3fa:	31 05       	cpc	r19, r1
 3fc:	71 f1       	breq	.+92     	; 0x45a <DIO_u8SetPinValue+0xbe>
 3fe:	8f 81       	ldd	r24, Y+7	; 0x07
 400:	98 85       	ldd	r25, Y+8	; 0x08
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	91 05       	cpc	r25, r1
 406:	e9 f1       	breq	.+122    	; 0x482 <DIO_u8SetPinValue+0xe6>
 408:	50 c0       	rjmp	.+160    	; 0x4aa <DIO_u8SetPinValue+0x10e>
			{
			case PORT_A : SetBit( PORTA , Copy_u8PinValue ) ; break ;
 40a:	ab e3       	ldi	r26, 0x3B	; 59
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	eb e3       	ldi	r30, 0x3B	; 59
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	8c 81       	ldd	r24, Y+4	; 0x04
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 2e       	mov	r0, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8SetPinValue+0x8c>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_u8SetPinValue+0x88>
 42c:	84 2b       	or	r24, r20
 42e:	8c 93       	st	X, r24
 430:	b9 c0       	rjmp	.+370    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_B : SetBit( PORTB , Copy_u8PinValue ) ; break ;
 432:	a8 e3       	ldi	r26, 0x38	; 56
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e8 e3       	ldi	r30, 0x38	; 56
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_u8SetPinValue+0xb4>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_u8SetPinValue+0xb0>
 454:	84 2b       	or	r24, r20
 456:	8c 93       	st	X, r24
 458:	a5 c0       	rjmp	.+330    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_C : SetBit( PORTC , Copy_u8PinValue ) ; break ;
 45a:	a5 e3       	ldi	r26, 0x35	; 53
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	e5 e3       	ldi	r30, 0x35	; 53
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 2e       	mov	r0, r18
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8SetPinValue+0xdc>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8SetPinValue+0xd8>
 47c:	84 2b       	or	r24, r20
 47e:	8c 93       	st	X, r24
 480:	91 c0       	rjmp	.+290    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_D : SetBit( PORTD , Copy_u8PinValue ) ; break ;
 482:	a2 e3       	ldi	r26, 0x32	; 50
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e2 e3       	ldi	r30, 0x32	; 50
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8c 81       	ldd	r24, Y+4	; 0x04
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPinValue+0x104>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8SetPinValue+0x100>
 4a4:	84 2b       	or	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	7d c0       	rjmp	.+250    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			default     : Local_u8NoError = 0 ;
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	7b c0       	rjmp	.+246    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			}//end first switch
		}//end first if

		else if( Copy_u8PinValue == LOW )
 4ae:	8c 81       	ldd	r24, Y+4	; 0x04
 4b0:	88 23       	and	r24, r24
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <DIO_u8SetPinValue+0x11a>
 4b4:	77 c0       	rjmp	.+238    	; 0x5a4 <DIO_u8SetPinValue+0x208>
		{
			Local_u8NoError = 1 ;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	89 83       	std	Y+1, r24	; 0x01

			switch( Copy_u8PortName )
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	3e 83       	std	Y+6, r19	; 0x06
 4c2:	2d 83       	std	Y+5, r18	; 0x05
 4c4:	8d 81       	ldd	r24, Y+5	; 0x05
 4c6:	9e 81       	ldd	r25, Y+6	; 0x06
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	59 f1       	breq	.+86     	; 0x524 <DIO_u8SetPinValue+0x188>
 4ce:	2d 81       	ldd	r18, Y+5	; 0x05
 4d0:	3e 81       	ldd	r19, Y+6	; 0x06
 4d2:	22 30       	cpi	r18, 0x02	; 2
 4d4:	31 05       	cpc	r19, r1
 4d6:	2c f4       	brge	.+10     	; 0x4e2 <DIO_u8SetPinValue+0x146>
 4d8:	8d 81       	ldd	r24, Y+5	; 0x05
 4da:	9e 81       	ldd	r25, Y+6	; 0x06
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	69 f0       	breq	.+26     	; 0x4fa <DIO_u8SetPinValue+0x15e>
 4e0:	60 c0       	rjmp	.+192    	; 0x5a2 <DIO_u8SetPinValue+0x206>
 4e2:	2d 81       	ldd	r18, Y+5	; 0x05
 4e4:	3e 81       	ldd	r19, Y+6	; 0x06
 4e6:	22 30       	cpi	r18, 0x02	; 2
 4e8:	31 05       	cpc	r19, r1
 4ea:	89 f1       	breq	.+98     	; 0x54e <DIO_u8SetPinValue+0x1b2>
 4ec:	8d 81       	ldd	r24, Y+5	; 0x05
 4ee:	9e 81       	ldd	r25, Y+6	; 0x06
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	91 05       	cpc	r25, r1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_u8SetPinValue+0x15c>
 4f6:	40 c0       	rjmp	.+128    	; 0x578 <DIO_u8SetPinValue+0x1dc>
 4f8:	54 c0       	rjmp	.+168    	; 0x5a2 <DIO_u8SetPinValue+0x206>
			{
			case PORT_A : ClearBit( PORTA , Copy_u8PinValue ) ; break ;
 4fa:	ab e3       	ldi	r26, 0x3B	; 59
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	eb e3       	ldi	r30, 0x3B	; 59
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_u8SetPinValue+0x17c>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_u8SetPinValue+0x178>
 51c:	80 95       	com	r24
 51e:	84 23       	and	r24, r20
 520:	8c 93       	st	X, r24
 522:	40 c0       	rjmp	.+128    	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_B : ClearBit( PORTB , Copy_u8PinValue ) ; break ;
 524:	a8 e3       	ldi	r26, 0x38	; 56
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	e8 e3       	ldi	r30, 0x38	; 56
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	48 2f       	mov	r20, r24
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 2e       	mov	r0, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_u8SetPinValue+0x1a6>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_u8SetPinValue+0x1a2>
 546:	80 95       	com	r24
 548:	84 23       	and	r24, r20
 54a:	8c 93       	st	X, r24
 54c:	2b c0       	rjmp	.+86     	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_C : ClearBit( PORTC , Copy_u8PinValue ) ; break ;
 54e:	a5 e3       	ldi	r26, 0x35	; 53
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	e5 e3       	ldi	r30, 0x35	; 53
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	48 2f       	mov	r20, r24
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 2e       	mov	r0, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_u8SetPinValue+0x1d0>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_u8SetPinValue+0x1cc>
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	8c 93       	st	X, r24
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <DIO_u8SetPinValue+0x208>
			case PORT_D : ClearBit( PORTD , Copy_u8PinValue ) ; break ;
 578:	a2 e3       	ldi	r26, 0x32	; 50
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	e2 e3       	ldi	r30, 0x32	; 50
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	48 2f       	mov	r20, r24
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 2e       	mov	r0, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8SetPinValue+0x1fa>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8SetPinValue+0x1f6>
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	8c 93       	st	X, r24
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <DIO_u8SetPinValue+0x208>
			default     : Local_u8NoError = 0 ;
 5a2:	19 82       	std	Y+1, r1	; 0x01
			}//end second switch
		}//end second if
	}//end outer if

	return Local_u8NoError ;
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
 5a6:	28 96       	adiw	r28, 0x08	; 8
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	cf 91       	pop	r28
 5b4:	df 91       	pop	r29
 5b6:	08 95       	ret

000005b8 <DIO_u8SetPortValue>:
 * this function take value from 0 to 255 and set it to
 * the selected port
 */

u8 DIO_u8SetPortValue    ( u8 Copy_u8PortName , u8 Copy_u8PortValue )
{
 5b8:	df 93       	push	r29
 5ba:	cf 93       	push	r28
 5bc:	00 d0       	rcall	.+0      	; 0x5be <DIO_u8SetPortValue+0x6>
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <DIO_u8SetPortValue+0x8>
 5c0:	0f 92       	push	r0
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	8a 83       	std	Y+2, r24	; 0x02
 5c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8NoError = 0 ;
 5ca:	19 82       	std	Y+1, r1	; 0x01

	switch( Copy_u8PortName )
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	3d 83       	std	Y+5, r19	; 0x05
 5d4:	2c 83       	std	Y+4, r18	; 0x04
 5d6:	8c 81       	ldd	r24, Y+4	; 0x04
 5d8:	9d 81       	ldd	r25, Y+5	; 0x05
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	91 05       	cpc	r25, r1
 5de:	d1 f0       	breq	.+52     	; 0x614 <DIO_u8SetPortValue+0x5c>
 5e0:	2c 81       	ldd	r18, Y+4	; 0x04
 5e2:	3d 81       	ldd	r19, Y+5	; 0x05
 5e4:	22 30       	cpi	r18, 0x02	; 2
 5e6:	31 05       	cpc	r19, r1
 5e8:	2c f4       	brge	.+10     	; 0x5f4 <DIO_u8SetPortValue+0x3c>
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	61 f0       	breq	.+24     	; 0x60a <DIO_u8SetPortValue+0x52>
 5f2:	1f c0       	rjmp	.+62     	; 0x632 <DIO_u8SetPortValue+0x7a>
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	22 30       	cpi	r18, 0x02	; 2
 5fa:	31 05       	cpc	r19, r1
 5fc:	81 f0       	breq	.+32     	; 0x61e <DIO_u8SetPortValue+0x66>
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	9d 81       	ldd	r25, Y+5	; 0x05
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	91 05       	cpc	r25, r1
 606:	81 f0       	breq	.+32     	; 0x628 <DIO_u8SetPortValue+0x70>
 608:	14 c0       	rjmp	.+40     	; 0x632 <DIO_u8SetPortValue+0x7a>
	{
	case PORT_A : PORTA = Copy_u8PortValue ; break ;
 60a:	eb e3       	ldi	r30, 0x3B	; 59
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	8b 81       	ldd	r24, Y+3	; 0x03
 610:	80 83       	st	Z, r24
 612:	10 c0       	rjmp	.+32     	; 0x634 <DIO_u8SetPortValue+0x7c>
	case PORT_B : PORTB = Copy_u8PortValue ; break ;
 614:	e8 e3       	ldi	r30, 0x38	; 56
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	80 83       	st	Z, r24
 61c:	0b c0       	rjmp	.+22     	; 0x634 <DIO_u8SetPortValue+0x7c>
	case PORT_C : PORTC = Copy_u8PortValue ; break ;
 61e:	e5 e3       	ldi	r30, 0x35	; 53
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	80 83       	st	Z, r24
 626:	06 c0       	rjmp	.+12     	; 0x634 <DIO_u8SetPortValue+0x7c>
	case PORT_D : PORTD = Copy_u8PortValue ; break ;
 628:	e2 e3       	ldi	r30, 0x32	; 50
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	80 83       	st	Z, r24
 630:	01 c0       	rjmp	.+2      	; 0x634 <DIO_u8SetPortValue+0x7c>
	default     : Local_u8NoError = 0 ;
 632:	19 82       	std	Y+1, r1	; 0x01
	}//end switch
    return Local_u8NoError ;
 634:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	cf 91       	pop	r28
 642:	df 91       	pop	r29
 644:	08 95       	ret

00000646 <DIO_u8ReadPin>:
 * this function take port name && number of pin you want to read && pointer to hold read value.
 *
 */

u8 DIO_u8ReadPin         ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8* Copy_pu8ReadedValue )
{
 646:	df 93       	push	r29
 648:	cf 93       	push	r28
 64a:	cd b7       	in	r28, 0x3d	; 61
 64c:	de b7       	in	r29, 0x3e	; 62
 64e:	27 97       	sbiw	r28, 0x07	; 7
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	f8 94       	cli
 654:	de bf       	out	0x3e, r29	; 62
 656:	0f be       	out	0x3f, r0	; 63
 658:	cd bf       	out	0x3d, r28	; 61
 65a:	8a 83       	std	Y+2, r24	; 0x02
 65c:	6b 83       	std	Y+3, r22	; 0x03
 65e:	5d 83       	std	Y+5, r21	; 0x05
 660:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8NoError = 0 ;
 662:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 30       	cpi	r24, 0x08	; 8
 668:	08 f0       	brcs	.+2      	; 0x66c <DIO_u8ReadPin+0x26>
 66a:	72 c0       	rjmp	.+228    	; 0x750 <DIO_u8ReadPin+0x10a>
	{
		Local_u8NoError = 1 ;
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8PortName )
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	3f 83       	std	Y+7, r19	; 0x07
 678:	2e 83       	std	Y+6, r18	; 0x06
 67a:	8e 81       	ldd	r24, Y+6	; 0x06
 67c:	9f 81       	ldd	r25, Y+7	; 0x07
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	91 05       	cpc	r25, r1
 682:	49 f1       	breq	.+82     	; 0x6d6 <DIO_u8ReadPin+0x90>
 684:	2e 81       	ldd	r18, Y+6	; 0x06
 686:	3f 81       	ldd	r19, Y+7	; 0x07
 688:	22 30       	cpi	r18, 0x02	; 2
 68a:	31 05       	cpc	r19, r1
 68c:	2c f4       	brge	.+10     	; 0x698 <DIO_u8ReadPin+0x52>
 68e:	8e 81       	ldd	r24, Y+6	; 0x06
 690:	9f 81       	ldd	r25, Y+7	; 0x07
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	61 f0       	breq	.+24     	; 0x6ae <DIO_u8ReadPin+0x68>
 696:	5b c0       	rjmp	.+182    	; 0x74e <DIO_u8ReadPin+0x108>
 698:	2e 81       	ldd	r18, Y+6	; 0x06
 69a:	3f 81       	ldd	r19, Y+7	; 0x07
 69c:	22 30       	cpi	r18, 0x02	; 2
 69e:	31 05       	cpc	r19, r1
 6a0:	71 f1       	breq	.+92     	; 0x6fe <DIO_u8ReadPin+0xb8>
 6a2:	8e 81       	ldd	r24, Y+6	; 0x06
 6a4:	9f 81       	ldd	r25, Y+7	; 0x07
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	91 05       	cpc	r25, r1
 6aa:	e9 f1       	breq	.+122    	; 0x726 <DIO_u8ReadPin+0xe0>
 6ac:	50 c0       	rjmp	.+160    	; 0x74e <DIO_u8ReadPin+0x108>
		{
		case PORT_A : *Copy_pu8ReadedValue = GetBit( PINA , Copy_u8PinNumber ) ; break ;
 6ae:	e9 e3       	ldi	r30, 0x39	; 57
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	48 2f       	mov	r20, r24
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 2e       	mov	r0, r18
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_u8ReadPin+0x82>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	0a 94       	dec	r0
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_u8ReadPin+0x7e>
 6cc:	84 23       	and	r24, r20
 6ce:	ec 81       	ldd	r30, Y+4	; 0x04
 6d0:	fd 81       	ldd	r31, Y+5	; 0x05
 6d2:	80 83       	st	Z, r24
 6d4:	3d c0       	rjmp	.+122    	; 0x750 <DIO_u8ReadPin+0x10a>
		case PORT_B : *Copy_pu8ReadedValue = GetBit( PINB , Copy_u8PinNumber ) ; break ;
 6d6:	e6 e3       	ldi	r30, 0x36	; 54
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_u8ReadPin+0xaa>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_u8ReadPin+0xa6>
 6f4:	84 23       	and	r24, r20
 6f6:	ec 81       	ldd	r30, Y+4	; 0x04
 6f8:	fd 81       	ldd	r31, Y+5	; 0x05
 6fa:	80 83       	st	Z, r24
 6fc:	29 c0       	rjmp	.+82     	; 0x750 <DIO_u8ReadPin+0x10a>
		case PORT_C : *Copy_pu8ReadedValue = GetBit( PINC , Copy_u8PinNumber ) ; break ;
 6fe:	e3 e3       	ldi	r30, 0x33	; 51
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_u8ReadPin+0xd2>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_u8ReadPin+0xce>
 71c:	84 23       	and	r24, r20
 71e:	ec 81       	ldd	r30, Y+4	; 0x04
 720:	fd 81       	ldd	r31, Y+5	; 0x05
 722:	80 83       	st	Z, r24
 724:	15 c0       	rjmp	.+42     	; 0x750 <DIO_u8ReadPin+0x10a>
		case PORT_D : *Copy_pu8ReadedValue = GetBit( PIND , Copy_u8PinNumber ) ; break ;
 726:	e0 e3       	ldi	r30, 0x30	; 48
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	48 2f       	mov	r20, r24
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 2e       	mov	r0, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_u8ReadPin+0xfa>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_u8ReadPin+0xf6>
 744:	84 23       	and	r24, r20
 746:	ec 81       	ldd	r30, Y+4	; 0x04
 748:	fd 81       	ldd	r31, Y+5	; 0x05
 74a:	80 83       	st	Z, r24
 74c:	01 c0       	rjmp	.+2      	; 0x750 <DIO_u8ReadPin+0x10a>
		default     :  Local_u8NoError = 0 ;
 74e:	19 82       	std	Y+1, r1	; 0x01
		}//end switch
	}//end if
	return Local_u8NoError ;
 750:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
 752:	27 96       	adiw	r28, 0x07	; 7
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	f8 94       	cli
 758:	de bf       	out	0x3e, r29	; 62
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	cd bf       	out	0x3d, r28	; 61
 75e:	cf 91       	pop	r28
 760:	df 91       	pop	r29
 762:	08 95       	ret

00000764 <main>:
#include "4-LIB/STD_TYPES.h"

#include "1-MCAL/1-DIO/DIO_interface.h"

void main ( void )
{
 764:	df 93       	push	r29
 766:	cf 93       	push	r28
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
	/* set port a as output */
	DIO_u8SetPinDirection(PORT_A, PIN_1, OUTPUT);
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
	/* set some pins high and low */
	DIO_u8SetPinValue(PORT_A, PIN_1, HIGH);
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_u8SetPinValue>
}
 780:	cf 91       	pop	r28
 782:	df 91       	pop	r29
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
