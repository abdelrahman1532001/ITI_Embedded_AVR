
06_Test_Lcd_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00001c82  00001cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016f8  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000edb  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000431b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000445b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000045cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000070ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <main>
      7a:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <IntegerToString>:
 ** Description => convert integer into string to print it on LCD                 **
 ** Input       => array to hold string, array size, integer to convert it        **
 ** Output      => none                                                           **
 ***********************************************************************************/
void IntegerToString(char* Copy_pcString, u8 Copy_u8StringSize, u32 Copy_u32Integer)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	29 97       	sbiw	r28, 0x09	; 9
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	9c 83       	std	Y+4, r25	; 0x04
     b4c:	8b 83       	std	Y+3, r24	; 0x03
     b4e:	6d 83       	std	Y+5, r22	; 0x05
     b50:	2e 83       	std	Y+6, r18	; 0x06
     b52:	3f 83       	std	Y+7, r19	; 0x07
     b54:	48 87       	std	Y+8, r20	; 0x08
     b56:	59 87       	std	Y+9, r21	; 0x09
	s8 Local_u8Iterator;
	u8 Local_u8OneDigit;

	Local_u8Iterator = Copy_u8StringSize - 1;
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	Copy_pcString[Local_u8Iterator] = '\0';
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	28 2f       	mov	r18, r24
     b62:	33 27       	eor	r19, r19
     b64:	27 fd       	sbrc	r18, 7
     b66:	30 95       	com	r19
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	fc 01       	movw	r30, r24
     b6e:	e2 0f       	add	r30, r18
     b70:	f3 1f       	adc	r31, r19
     b72:	10 82       	st	Z, r1
	Local_u8Iterator--;
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	31 c0       	rjmp	.+98     	; 0xbde <IntegerToString+0xa8>

	while(Local_u8Iterator >= 0)
	{
		Local_u8OneDigit = Copy_u32Integer % 10;
     b7c:	8e 81       	ldd	r24, Y+6	; 0x06
     b7e:	9f 81       	ldd	r25, Y+7	; 0x07
     b80:	a8 85       	ldd	r26, Y+8	; 0x08
     b82:	b9 85       	ldd	r27, Y+9	; 0x09
     b84:	2a e0       	ldi	r18, 0x0A	; 10
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	bc 01       	movw	r22, r24
     b8e:	cd 01       	movw	r24, r26
     b90:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__udivmodsi4>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 83       	std	Y+1, r24	; 0x01
		Copy_pcString[Local_u8Iterator] = Local_u8OneDigit + '0';
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	33 27       	eor	r19, r19
     ba0:	27 fd       	sbrc	r18, 7
     ba2:	30 95       	com	r19
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	fc 01       	movw	r30, r24
     baa:	e2 0f       	add	r30, r18
     bac:	f3 1f       	adc	r31, r19
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 5d       	subi	r24, 0xD0	; 208
     bb2:	80 83       	st	Z, r24
		Copy_u32Integer  = Copy_u32Integer / 10;
     bb4:	8e 81       	ldd	r24, Y+6	; 0x06
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	a8 85       	ldd	r26, Y+8	; 0x08
     bba:	b9 85       	ldd	r27, Y+9	; 0x09
     bbc:	2a e0       	ldi	r18, 0x0A	; 10
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__udivmodsi4>
     bcc:	da 01       	movw	r26, r20
     bce:	c9 01       	movw	r24, r18
     bd0:	8e 83       	std	Y+6, r24	; 0x06
     bd2:	9f 83       	std	Y+7, r25	; 0x07
     bd4:	a8 87       	std	Y+8, r26	; 0x08
     bd6:	b9 87       	std	Y+9, r27	; 0x09
		Local_u8Iterator--;
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	81 50       	subi	r24, 0x01	; 1
     bdc:	8a 83       	std	Y+2, r24	; 0x02

	Local_u8Iterator = Copy_u8StringSize - 1;
	Copy_pcString[Local_u8Iterator] = '\0';
	Local_u8Iterator--;

	while(Local_u8Iterator >= 0)
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	88 23       	and	r24, r24
     be2:	64 f6       	brge	.-104    	; 0xb7c <IntegerToString+0x46>
		Copy_pcString[Local_u8Iterator] = Local_u8OneDigit + '0';
		Copy_u32Integer  = Copy_u32Integer / 10;
		Local_u8Iterator--;
	}//end while

}
     be4:	29 96       	adiw	r28, 0x09	; 9
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <CalcNumOfDigit>:
 ** Description => calculate number of digit of integer positive number           **
 ** Input       => unsigned integer number                                        **
 ** Output      => number of digit                                                **
 ***********************************************************************************/
u8 CalcNumOfDigit( u32 Copy_u8Integer )
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <CalcNumOfDigit+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <CalcNumOfDigit+0x8>
     bfe:	0f 92       	push	r0
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	6a 83       	std	Y+2, r22	; 0x02
     c06:	7b 83       	std	Y+3, r23	; 0x03
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	9d 83       	std	Y+5, r25	; 0x05
	u8 Copy_pu8NumOfDigit = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <CalcNumOfDigit+0x46>

	while( Copy_u8Integer > 9 )
	{
		Copy_pu8NumOfDigit++;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Integer = Copy_u8Integer / 10 ;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	ac 81       	ldd	r26, Y+4	; 0x04
     c1e:	bd 81       	ldd	r27, Y+5	; 0x05
     c20:	2a e0       	ldi	r18, 0x0A	; 10
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	bc 01       	movw	r22, r24
     c2a:	cd 01       	movw	r24, r26
     c2c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__udivmodsi4>
     c30:	da 01       	movw	r26, r20
     c32:	c9 01       	movw	r24, r18
     c34:	8a 83       	std	Y+2, r24	; 0x02
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	ac 83       	std	Y+4, r26	; 0x04
     c3a:	bd 83       	std	Y+5, r27	; 0x05
 ***********************************************************************************/
u8 CalcNumOfDigit( u32 Copy_u8Integer )
{
	u8 Copy_pu8NumOfDigit = 1;

	while( Copy_u8Integer > 9 )
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	9b 81       	ldd	r25, Y+3	; 0x03
     c40:	ac 81       	ldd	r26, Y+4	; 0x04
     c42:	bd 81       	ldd	r27, Y+5	; 0x05
     c44:	8a 30       	cpi	r24, 0x0A	; 10
     c46:	91 05       	cpc	r25, r1
     c48:	a1 05       	cpc	r26, r1
     c4a:	b1 05       	cpc	r27, r1
     c4c:	10 f7       	brcc	.-60     	; 0xc12 <CalcNumOfDigit+0x1c>
	{
		Copy_pu8NumOfDigit++;
		Copy_u8Integer = Copy_u8Integer / 10 ;
	}

	return Copy_pu8NumOfDigit;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <LCD_voidInit>:




void LCD_voidInit( void )
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	2e 97       	sbiw	r28, 0x0e	; 14
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a0 e2       	ldi	r26, 0x20	; 32
     c7a:	b2 e4       	ldi	r27, 0x42	; 66
     c7c:	8b 87       	std	Y+11, r24	; 0x0b
     c7e:	9c 87       	std	Y+12, r25	; 0x0c
     c80:	ad 87       	std	Y+13, r26	; 0x0d
     c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c84:	6b 85       	ldd	r22, Y+11	; 0x0b
     c86:	7c 85       	ldd	r23, Y+12	; 0x0c
     c88:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	4a ef       	ldi	r20, 0xFA	; 250
     c92:	54 e4       	ldi	r21, 0x44	; 68
     c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	8f 83       	std	Y+7, r24	; 0x07
     c9e:	98 87       	std	Y+8, r25	; 0x08
     ca0:	a9 87       	std	Y+9, r26	; 0x09
     ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ca4:	6f 81       	ldd	r22, Y+7	; 0x07
     ca6:	78 85       	ldd	r23, Y+8	; 0x08
     ca8:	89 85       	ldd	r24, Y+9	; 0x09
     caa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cb8:	88 23       	and	r24, r24
     cba:	2c f4       	brge	.+10     	; 0xcc6 <LCD_voidInit+0x66>
		__ticks = 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	3f c0       	rjmp	.+126    	; 0xd44 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
     cc6:	6f 81       	ldd	r22, Y+7	; 0x07
     cc8:	78 85       	ldd	r23, Y+8	; 0x08
     cca:	89 85       	ldd	r24, Y+9	; 0x09
     ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cda:	18 16       	cp	r1, r24
     cdc:	4c f5       	brge	.+82     	; 0xd30 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cde:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	0f c0       	rjmp	.+30     	; 0xd26 <LCD_voidInit+0xc6>
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_voidInit+0xb4>
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	69 f7       	brne	.-38     	; 0xd08 <LCD_voidInit+0xa8>
     d2e:	14 c0       	rjmp	.+40     	; 0xd58 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d30:	6f 81       	ldd	r22, Y+7	; 0x07
     d32:	78 85       	ldd	r23, Y+8	; 0x08
     d34:	89 85       	ldd	r24, Y+9	; 0x09
     d36:	9a 85       	ldd	r25, Y+10	; 0x0a
     d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <LCD_voidInit+0xf0>
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
	/* wait more than 30ms */
	_delay_ms(40);
	/* function set command : 2 lines(DB3), 5*8 font size(DB2) */
	LCD_voidSendCommand(0b00111000);
     d58:	88 e3       	ldi	r24, 0x38	; 56
     d5a:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
	/* Display ON/OFF control : Display enable , No cursor , No blink */
	LCD_voidSendCommand(0b00001100);
     d5e:	8c e0       	ldi	r24, 0x0C	; 12
     d60:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
	/* Display clear */
	LCD_voidSendCommand(0b00000001);
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
	/* Entry mode set ( don't care ) */

}
     d6a:	2e 96       	adiw	r28, 0x0e	; 14
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <LCD_voidSendCommand>:


void LCD_voidSendCommand( u8 Copy_u8Command)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	2f 97       	sbiw	r28, 0x0f	; 15
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, LOW);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	65 e0       	ldi	r22, 0x05	; 5
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>

	/*Set RW pin to low for writing commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	66 e0       	ldi	r22, 0x06	; 6
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>

	/*Send commands using data port*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	6f 85       	ldd	r22, Y+15	; 0x0f
     daa:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8SetPortValue>

	/*Set enable pin to high for 2ms then set it to low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, HIGH);
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	67 e0       	ldi	r22, 0x07	; 7
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e4       	ldi	r27, 0x40	; 64
     dc0:	8b 87       	std	Y+11, r24	; 0x0b
     dc2:	9c 87       	std	Y+12, r25	; 0x0c
     dc4:	ad 87       	std	Y+13, r26	; 0x0d
     dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dca:	7c 85       	ldd	r23, Y+12	; 0x0c
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a ef       	ldi	r20, 0xFA	; 250
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8f 83       	std	Y+7, r24	; 0x07
     de2:	98 87       	std	Y+8, r25	; 0x08
     de4:	a9 87       	std	Y+9, r26	; 0x09
     de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	2c f4       	brge	.+10     	; 0xe0a <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	4c f5       	brge	.+82     	; 0xe74 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	6b 85       	ldd	r22, Y+11	; 0x0b
     e24:	7c 85       	ldd	r23, Y+12	; 0x0c
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <LCD_voidSendCommand+0xee>
     e4c:	88 ec       	ldi	r24, 0xC8	; 200
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <LCD_voidSendCommand+0xdc>
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	69 f7       	brne	.-38     	; 0xe4c <LCD_voidSendCommand+0xd0>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	6f 81       	ldd	r22, Y+7	; 0x07
     e76:	78 85       	ldd	r23, Y+8	; 0x08
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <LCD_voidSendCommand+0x118>
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, LOW);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	67 e0       	ldi	r22, 0x07	; 7
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>

}
     ea6:	2f 96       	adiw	r28, 0x0f	; 15
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <LCD_voidSendData>:


void LCD_voidSendData( u8 Copy_u8Data )
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	2f 97       	sbiw	r28, 0x0f	; 15
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, HIGH);
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	65 e0       	ldi	r22, 0x05	; 5
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>

	/*Set RW pin to low for writing commands*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, LOW);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	66 e0       	ldi	r22, 0x06	; 6
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>

	/*Send commands using data port*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ee6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <DIO_u8SetPortValue>

	/*Set enable pin to high for 2ms then set it to low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, HIGH);
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	67 e0       	ldi	r22, 0x07	; 7
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e4       	ldi	r27, 0x40	; 64
     efc:	8b 87       	std	Y+11, r24	; 0x0b
     efe:	9c 87       	std	Y+12, r25	; 0x0c
     f00:	ad 87       	std	Y+13, r26	; 0x0d
     f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	6b 85       	ldd	r22, Y+11	; 0x0b
     f06:	7c 85       	ldd	r23, Y+12	; 0x0c
     f08:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8f 83       	std	Y+7, r24	; 0x07
     f1e:	98 87       	std	Y+8, r25	; 0x08
     f20:	a9 87       	std	Y+9, r26	; 0x09
     f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <LCD_voidSendData+0x8e>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f60:	7c 85       	ldd	r23, Y+12	; 0x0c
     f62:	8d 85       	ldd	r24, Y+13	; 0x0d
     f64:	9e 85       	ldd	r25, Y+14	; 0x0e
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <LCD_voidSendData+0xee>
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <LCD_voidSendData+0xdc>
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <LCD_voidSendData+0xd0>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	8d 83       	std	Y+5, r24	; 0x05
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <LCD_voidSendData+0x118>
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT, LCD_ENABLE_PIN, LOW);
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	67 e0       	ldi	r22, 0x07	; 7
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_u8SetPinValue>
}
     fe2:	2f 96       	adiw	r28, 0x0f	; 15
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <LCD_voidPrintString>:


void LCD_voidPrintString( const char* Copy_pcString )
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <LCD_voidPrintString+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8EndString = 0 ;
    1004:	19 82       	std	Y+1, r1	; 0x01
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <LCD_voidPrintString+0x30>
	while( Copy_pcString[ Local_u8EndString ] != '\0' )
	{
		LCD_voidSendData( Copy_pcString[ Local_u8EndString ] ) ;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	9b 81       	ldd	r25, Y+3	; 0x03
    1012:	fc 01       	movw	r30, r24
    1014:	e2 0f       	add	r30, r18
    1016:	f3 1f       	adc	r31, r19
    1018:	80 81       	ld	r24, Z
    101a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidSendData>
		Local_u8EndString ++ ;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidPrintString( const char* Copy_pcString )
{
	u8 Local_u8EndString = 0 ;
	while( Copy_pcString[ Local_u8EndString ] != '\0' )
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	fc 01       	movw	r30, r24
    1030:	e2 0f       	add	r30, r18
    1032:	f3 1f       	adc	r31, r19
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	39 f7       	brne	.-50     	; 0x1008 <LCD_voidPrintString+0x14>
	{
		LCD_voidSendData( Copy_pcString[ Local_u8EndString ] ) ;
		Local_u8EndString ++ ;
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <LCD_voidPrintChar>:

void LCD_voidPrintChar( const u8 Copy_u8Char )
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
	/* send data to LCD */
	LCD_voidSendData( Copy_u8Char );
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidSendData>
}
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <LCD_voidClear>:

void LCD_voidClear( void )
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	/* clear screen of LCD */
	LCD_voidSendCommand( 1 ) ;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <LCD_voidCursorHome>:

void LCD_voidCursorHome( void )
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	/* send command to return cursor to home */
	LCD_voidSendCommand( 0b00000010 );
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <LCD_voidSetCursorPos>:



void LCD_voidSetCursorPos( u8 Copy_u8NumOfRow, u8 Copy_u8NumOfColumn )
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <LCD_voidSetCursorPos+0x6>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to store address you want to start from */
	u8 Local_u8Address ;

	if( Copy_u8NumOfRow == 0 )
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 23       	and	r24, r24
    109c:	19 f4       	brne	.+6      	; 0x10a4 <LCD_voidSetCursorPos+0x1c>
	{
		/* address is the same number of column in first Row */
		Local_u8Address = Copy_u8NumOfColumn ;
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <LCD_voidSetCursorPos+0x28>
	}
	else if ( Copy_u8NumOfRow == 1 )
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <LCD_voidSetCursorPos+0x28>
	{
		/* address is the same number of column + 40 in second Row */
		Local_u8Address = Copy_u8NumOfColumn + 0x40 ;
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	80 5c       	subi	r24, 0xC0	; 192
    10ae:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Set bit 7 to set DDRAM address */
	Local_u8Address |= ( 1 << 7 ) ;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	89 83       	std	Y+1, r24	; 0x01
	/* send address you want to write data from it */
	LCD_voidSendCommand( Local_u8Address );
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <LCD_voidAddSpecialChar>:


void LCD_voidAddSpecialChar( const u8* Copy_pu8CharDesign, u8 Copy_u8PatternNum )
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <LCD_voidAddSpecialChar+0x6>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <LCD_voidAddSpecialChar+0x8>
    10d0:	0f 92       	push	r0
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	6d 83       	std	Y+5, r22	; 0x05
	/* variable to hold start address */
	u8 Local_u8CGRAMaddress = 0;
    10dc:	1a 82       	std	Y+2, r1	; 0x02
	/* set bit 6 and clear bit 7 to set CGRAM address */
	Local_u8CGRAMaddress = Copy_u8PatternNum * 8;
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8CGRAMaddress |= ( 1 << 6 );
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 64       	ori	r24, 0x40	; 64
    10f6:	8a 83       	std	Y+2, r24	; 0x02
	/* detect address of CGRAM you will write on ( 0 ~ 7 ) */
	LCD_voidSendCommand( Local_u8CGRAMaddress ) ;
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_voidSendCommand>
	/* Write character design inside CGRAM */
	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++ )
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	0e c0       	rjmp	.+28     	; 0x111e <LCD_voidAddSpecialChar+0x56>
	{
		/* Send Pattern to CGRAM byte by byte */
		LCD_voidSendData( Copy_pu8CharDesign[ Local_u8Counter ] );
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	80 81       	ld	r24, Z
    1114:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidSendData>
	Local_u8CGRAMaddress = Copy_u8PatternNum * 8;
	Local_u8CGRAMaddress |= ( 1 << 6 );
	/* detect address of CGRAM you will write on ( 0 ~ 7 ) */
	LCD_voidSendCommand( Local_u8CGRAMaddress ) ;
	/* Write character design inside CGRAM */
	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 8 ; Local_u8Counter++ )
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	78 f3       	brcs	.-34     	; 0x1102 <LCD_voidAddSpecialChar+0x3a>
	{
		/* Send Pattern to CGRAM byte by byte */
		LCD_voidSendData( Copy_pu8CharDesign[ Local_u8Counter ] );
	}

}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <LCD_voidPrintSpecialChar>:

void LCD_voidPrintSpecialChar( u8 Copy_u8PatternNum, u8 Copy_u8RowNum, u8 Copy_u8ColumnNum )
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <LCD_voidPrintSpecialChar+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 83       	std	Y+2, r22	; 0x02
    1144:	4b 83       	std	Y+3, r20	; 0x03
	/* go to address on DD RAM */
	LCD_voidSetCursorPos( Copy_u8RowNum, Copy_u8ColumnNum );
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	6b 81       	ldd	r22, Y+3	; 0x03
    114a:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_voidSetCursorPos>
	/* print special character on LCD */
	LCD_voidSendData( Copy_u8PatternNum );
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidSendData>
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <LCD_voidPrintNumber>:


void LCD_voidPrintNumber(u32 Copy_u32Number)
{
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	29 97       	sbiw	r28, 0x09	; 9
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	6c 83       	std	Y+4, r22	; 0x04
    117e:	7d 83       	std	Y+5, r23	; 0x05
    1180:	8e 83       	std	Y+6, r24	; 0x06
    1182:	9f 83       	std	Y+7, r25	; 0x07

	IntegerToString( Local_u8Buffer, Local_u8BufferSize, Copy_u32Number );

	LCD_voidPrintString( Local_u8Buffer );

}
    1184:	0d b7       	in	r16, 0x3d	; 61
    1186:	1e b7       	in	r17, 0x3e	; 62
	LCD_voidSendData( Copy_u8PatternNum );
}


void LCD_voidPrintNumber(u32 Copy_u32Number)
{
    1188:	8d b7       	in	r24, 0x3d	; 61
    118a:	9e b7       	in	r25, 0x3e	; 62
    118c:	7c 01       	movw	r14, r24
	u8 Local_u8BufferSize;

	Local_u8BufferSize = CalcNumOfDigit( Copy_u32Number ) + 1;
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	ae 81       	ldd	r26, Y+6	; 0x06
    1194:	bf 81       	ldd	r27, Y+7	; 0x07
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <CalcNumOfDigit>
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	89 83       	std	Y+1, r24	; 0x01

	char Local_u8Buffer[Local_u8BufferSize] ;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2d b7       	in	r18, 0x3d	; 61
    11aa:	3e b7       	in	r19, 0x3e	; 62
    11ac:	28 1b       	sub	r18, r24
    11ae:	39 0b       	sbc	r19, r25
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	3e bf       	out	0x3e, r19	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	2d bf       	out	0x3d, r18	; 61
    11ba:	8d b7       	in	r24, 0x3d	; 61
    11bc:	9e b7       	in	r25, 0x3e	; 62
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	99 87       	std	Y+9, r25	; 0x09
    11c2:	88 87       	std	Y+8, r24	; 0x08
    11c4:	88 85       	ldd	r24, Y+8	; 0x08
    11c6:	99 85       	ldd	r25, Y+9	; 0x09
    11c8:	00 96       	adiw	r24, 0x00	; 0
    11ca:	99 87       	std	Y+9, r25	; 0x09
    11cc:	88 87       	std	Y+8, r24	; 0x08
    11ce:	28 85       	ldd	r18, Y+8	; 0x08
    11d0:	39 85       	ldd	r19, Y+9	; 0x09
    11d2:	3b 83       	std	Y+3, r19	; 0x03
    11d4:	2a 83       	std	Y+2, r18	; 0x02

	IntegerToString( Local_u8Buffer, Local_u8BufferSize, Copy_u32Number );
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	4e 81       	ldd	r20, Y+6	; 0x06
    11e0:	5f 81       	ldd	r21, Y+7	; 0x07
    11e2:	69 81       	ldd	r22, Y+1	; 0x01
    11e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <IntegerToString>

	LCD_voidPrintString( Local_u8Buffer );
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_voidPrintString>
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	fe be       	out	0x3e, r15	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	ed be       	out	0x3d, r14	; 61

}
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	1e bf       	out	0x3e, r17	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0d bf       	out	0x3d, r16	; 61
    1204:	29 96       	adiw	r28, 0x09	; 9
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <DIO_u8SetPinDirection>:
 ** of pin and direction you want to set on this pin output/input .       **
 ** return 0 then there is false data / return 1 then there is no wrong . **
 **                                                                       **
 ***************************************************************************/
u8 DIO_u8SetPinDirection ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8Direction )
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	28 97       	sbiw	r28, 0x08	; 8
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is good */
	u8 Local_u8ErrorState = 0 ;
    1238:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	09 f0       	breq	.+2      	; 0x1242 <DIO_u8SetPinDirection+0x24>
    1240:	76 c0       	rjmp	.+236    	; 0x132e <DIO_u8SetPinDirection+0x110>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	08 f0       	brcs	.+2      	; 0x124a <DIO_u8SetPinDirection+0x2c>
    1248:	72 c0       	rjmp	.+228    	; 0x132e <DIO_u8SetPinDirection+0x110>
	{
		switch( Copy_u8PortName )
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	38 87       	std	Y+8, r19	; 0x08
    1252:	2f 83       	std	Y+7, r18	; 0x07
    1254:	8f 81       	ldd	r24, Y+7	; 0x07
    1256:	98 85       	ldd	r25, Y+8	; 0x08
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	91 05       	cpc	r25, r1
    125c:	49 f1       	breq	.+82     	; 0x12b0 <DIO_u8SetPinDirection+0x92>
    125e:	2f 81       	ldd	r18, Y+7	; 0x07
    1260:	38 85       	ldd	r19, Y+8	; 0x08
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	2c f4       	brge	.+10     	; 0x1272 <DIO_u8SetPinDirection+0x54>
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	61 f0       	breq	.+24     	; 0x1288 <DIO_u8SetPinDirection+0x6a>
    1270:	5b c0       	rjmp	.+182    	; 0x1328 <DIO_u8SetPinDirection+0x10a>
    1272:	2f 81       	ldd	r18, Y+7	; 0x07
    1274:	38 85       	ldd	r19, Y+8	; 0x08
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	71 f1       	breq	.+92     	; 0x12d8 <DIO_u8SetPinDirection+0xba>
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	91 05       	cpc	r25, r1
    1284:	e9 f1       	breq	.+122    	; 0x1300 <DIO_u8SetPinDirection+0xe2>
    1286:	50 c0       	rjmp	.+160    	; 0x1328 <DIO_u8SetPinDirection+0x10a>
		{
		case PORT_A : SetBit( DDRA, Copy_u8PinNumber) ; break ;
    1288:	aa e3       	ldi	r26, 0x3A	; 58
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea e3       	ldi	r30, 0x3A	; 58
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_u8SetPinDirection+0x88>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_u8SetPinDirection+0x84>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	c0 c0       	rjmp	.+384    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_B : SetBit( DDRB, Copy_u8PinNumber) ; break ;
    12b0:	a7 e3       	ldi	r26, 0x37	; 55
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e7 e3       	ldi	r30, 0x37	; 55
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8SetPinDirection+0xb0>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8SetPinDirection+0xac>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	ac c0       	rjmp	.+344    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_C : SetBit( DDRC, Copy_u8PinNumber) ; break ;
    12d8:	a4 e3       	ldi	r26, 0x34	; 52
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_u8SetPinDirection+0xd8>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_u8SetPinDirection+0xd4>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	98 c0       	rjmp	.+304    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_D : SetBit( DDRD, Copy_u8PinNumber) ; break ;
    1300:	a1 e3       	ldi	r26, 0x31	; 49
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e1 e3       	ldi	r30, 0x31	; 49
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_u8SetPinDirection+0x100>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_u8SetPinDirection+0xfc>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	84 c0       	rjmp	.+264    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		default     : Local_u8ErrorState = 1 ;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	81 c0       	rjmp	.+258    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		}//end switch
	}//end if
	else if( Copy_u8Direction == INPUT && Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	88 23       	and	r24, r24
    1332:	09 f0       	breq	.+2      	; 0x1336 <DIO_u8SetPinDirection+0x118>
    1334:	7b c0       	rjmp	.+246    	; 0x142c <DIO_u8SetPinDirection+0x20e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_u8SetPinDirection+0x120>
    133c:	77 c0       	rjmp	.+238    	; 0x142c <DIO_u8SetPinDirection+0x20e>
	{
		switch( Copy_u8PortName )
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3e 83       	std	Y+6, r19	; 0x06
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	59 f1       	breq	.+86     	; 0x13a8 <DIO_u8SetPinDirection+0x18a>
    1352:	2d 81       	ldd	r18, Y+5	; 0x05
    1354:	3e 81       	ldd	r19, Y+6	; 0x06
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_u8SetPinDirection+0x148>
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f0       	breq	.+26     	; 0x137e <DIO_u8SetPinDirection+0x160>
    1364:	60 c0       	rjmp	.+192    	; 0x1426 <DIO_u8SetPinDirection+0x208>
    1366:	2d 81       	ldd	r18, Y+5	; 0x05
    1368:	3e 81       	ldd	r19, Y+6	; 0x06
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	89 f1       	breq	.+98     	; 0x13d2 <DIO_u8SetPinDirection+0x1b4>
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_u8SetPinDirection+0x15e>
    137a:	40 c0       	rjmp	.+128    	; 0x13fc <DIO_u8SetPinDirection+0x1de>
    137c:	54 c0       	rjmp	.+168    	; 0x1426 <DIO_u8SetPinDirection+0x208>
		{
		case PORT_A : ClearBit( DDRA, Copy_u8PinNumber) ; break ;
    137e:	aa e3       	ldi	r26, 0x3A	; 58
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_u8SetPinDirection+0x17e>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_u8SetPinDirection+0x17a>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	44 c0       	rjmp	.+136    	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_B : ClearBit( DDRB, Copy_u8PinNumber) ; break ;
    13a8:	a7 e3       	ldi	r26, 0x37	; 55
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e7 e3       	ldi	r30, 0x37	; 55
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinDirection+0x1a8>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8SetPinDirection+0x1a4>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	2f c0       	rjmp	.+94     	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_C : ClearBit( DDRC, Copy_u8PinNumber) ; break ;
    13d2:	a4 e3       	ldi	r26, 0x34	; 52
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8SetPinDirection+0x1d2>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8SetPinDirection+0x1ce>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	1a c0       	rjmp	.+52     	; 0x1430 <DIO_u8SetPinDirection+0x212>
		case PORT_D : ClearBit( DDRD, Copy_u8PinNumber) ; break ;
    13fc:	a1 e3       	ldi	r26, 0x31	; 49
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e1 e3       	ldi	r30, 0x31	; 49
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_u8SetPinDirection+0x1fc>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_u8SetPinDirection+0x1f8>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <DIO_u8SetPinDirection+0x212>
		default     : Local_u8ErrorState = 1 ;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_u8SetPinDirection+0x212>
		}//end switch
	}//end else if
	else
	{
		Local_u8ErrorState = 1 ;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1432:	28 96       	adiw	r28, 0x08	; 8
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <DIO_u8SetPortDirection>:
 ** or input                                      **
 **                                               **
 ***************************************************/

u8 DIO_u8SetPortDirection( u8 Copy_u8PortName , u8 Copy_u8Direction )
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	27 97       	sbiw	r28, 0x07	; 7
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	8a 83       	std	Y+2, r24	; 0x02
    145a:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to check inserted data is right or not */
	u8 Local_u8ErrorState = 0 ;
    145c:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8Direction == OUTPUT )
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	b1 f5       	brne	.+108    	; 0x14d0 <DIO_u8SetPortDirection+0x8c>
	{
		switch( Copy_u8PortName )
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3f 83       	std	Y+7, r19	; 0x07
    146c:	2e 83       	std	Y+6, r18	; 0x06
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	d1 f0       	breq	.+52     	; 0x14ac <DIO_u8SetPortDirection+0x68>
    1478:	2e 81       	ldd	r18, Y+6	; 0x06
    147a:	3f 81       	ldd	r19, Y+7	; 0x07
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <DIO_u8SetPortDirection+0x48>
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	9f 81       	ldd	r25, Y+7	; 0x07
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	61 f0       	breq	.+24     	; 0x14a2 <DIO_u8SetPortDirection+0x5e>
    148a:	1f c0       	rjmp	.+62     	; 0x14ca <DIO_u8SetPortDirection+0x86>
    148c:	2e 81       	ldd	r18, Y+6	; 0x06
    148e:	3f 81       	ldd	r19, Y+7	; 0x07
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <DIO_u8SetPortDirection+0x72>
    1496:	8e 81       	ldd	r24, Y+6	; 0x06
    1498:	9f 81       	ldd	r25, Y+7	; 0x07
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <DIO_u8SetPortDirection+0x7c>
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <DIO_u8SetPortDirection+0x86>
		{
		case PORT_A : DDRA = DIO_PORT_OUTPUT ; break ;
    14a2:	ea e3       	ldi	r30, 0x3A	; 58
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	80 83       	st	Z, r24
    14aa:	49 c0       	rjmp	.+146    	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_B : DDRB = DIO_PORT_OUTPUT ; break ;
    14ac:	e7 e3       	ldi	r30, 0x37	; 55
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	80 83       	st	Z, r24
    14b4:	44 c0       	rjmp	.+136    	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_C : DDRC = DIO_PORT_OUTPUT ; break ;
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	80 83       	st	Z, r24
    14be:	3f c0       	rjmp	.+126    	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_D : DDRD = DIO_PORT_OUTPUT ; break ;
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 83       	st	Z, r24
    14c8:	3a c0       	rjmp	.+116    	; 0x153e <DIO_u8SetPortDirection+0xfa>
		default     : Local_u8ErrorState = 1 ;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	37 c0       	rjmp	.+110    	; 0x153e <DIO_u8SetPortDirection+0xfa>
		}//end switch case
	}//end if
	else if( Copy_u8Direction == INPUT )
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	88 23       	and	r24, r24
    14d4:	91 f5       	brne	.+100    	; 0x153a <DIO_u8SetPortDirection+0xf6>
	{
		switch( Copy_u8PortName )
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3d 83       	std	Y+5, r19	; 0x05
    14de:	2c 83       	std	Y+4, r18	; 0x04
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	c9 f0       	breq	.+50     	; 0x151c <DIO_u8SetPortDirection+0xd8>
    14ea:	2c 81       	ldd	r18, Y+4	; 0x04
    14ec:	3d 81       	ldd	r19, Y+5	; 0x05
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <DIO_u8SetPortDirection+0xba>
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <DIO_u8SetPortDirection+0xd0>
    14fc:	1b c0       	rjmp	.+54     	; 0x1534 <DIO_u8SetPortDirection+0xf0>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <DIO_u8SetPortDirection+0xe0>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	69 f0       	breq	.+26     	; 0x152c <DIO_u8SetPortDirection+0xe8>
    1512:	10 c0       	rjmp	.+32     	; 0x1534 <DIO_u8SetPortDirection+0xf0>
		{
		case PORT_A : DDRA = DIO_PORT_INPUT ; break ;
    1514:	ea e3       	ldi	r30, 0x3A	; 58
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	10 82       	st	Z, r1
    151a:	11 c0       	rjmp	.+34     	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_B : DDRB = DIO_PORT_INPUT ; break ;
    151c:	e7 e3       	ldi	r30, 0x37	; 55
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
    1522:	0d c0       	rjmp	.+26     	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_C : DDRC = DIO_PORT_INPUT ; break ;
    1524:	e4 e3       	ldi	r30, 0x34	; 52
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	10 82       	st	Z, r1
    152a:	09 c0       	rjmp	.+18     	; 0x153e <DIO_u8SetPortDirection+0xfa>
		case PORT_D : DDRD = DIO_PORT_INPUT ; break ;
    152c:	e1 e3       	ldi	r30, 0x31	; 49
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	10 82       	st	Z, r1
    1532:	05 c0       	rjmp	.+10     	; 0x153e <DIO_u8SetPortDirection+0xfa>
		default     : Local_u8ErrorState = 1 ;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_u8SetPortDirection+0xfa>
		}//end switch case
	}//end else if
	else
	{
		Local_u8ErrorState = 1 ;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1540:	27 96       	adiw	r28, 0x07	; 7
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO_u8SetPinValue>:
 ** this function take name of port && number of pin wanted to be set && state of pin high/low  **
 **                                                                                             **
 *************************************************************************************************/

u8 DIO_u8SetPinValue     ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8PinValue )
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	28 97       	sbiw	r28, 0x08	; 8
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	6b 83       	std	Y+3, r22	; 0x03
    156a:	4c 83       	std	Y+4, r20	; 0x04
	/* variable to check inserted data is right or not */
	u8 Local_u8ErrorState = 0 ;
    156c:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 30       	cpi	r24, 0x08	; 8
    1572:	08 f0       	brcs	.+2      	; 0x1576 <DIO_u8SetPinValue+0x24>
    1574:	f4 c0       	rjmp	.+488    	; 0x175e <DIO_u8SetPinValue+0x20c>
	{
		if( Copy_u8PinValue == HIGH )
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	09 f0       	breq	.+2      	; 0x157e <DIO_u8SetPinValue+0x2c>
    157c:	72 c0       	rjmp	.+228    	; 0x1662 <DIO_u8SetPinValue+0x110>
		{
			switch( Copy_u8PortName )
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	38 87       	std	Y+8, r19	; 0x08
    1586:	2f 83       	std	Y+7, r18	; 0x07
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	49 f1       	breq	.+82     	; 0x15e4 <DIO_u8SetPinValue+0x92>
    1592:	2f 81       	ldd	r18, Y+7	; 0x07
    1594:	38 85       	ldd	r19, Y+8	; 0x08
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <DIO_u8SetPinValue+0x54>
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	61 f0       	breq	.+24     	; 0x15bc <DIO_u8SetPinValue+0x6a>
    15a4:	5b c0       	rjmp	.+182    	; 0x165c <DIO_u8SetPinValue+0x10a>
    15a6:	2f 81       	ldd	r18, Y+7	; 0x07
    15a8:	38 85       	ldd	r19, Y+8	; 0x08
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	71 f1       	breq	.+92     	; 0x160c <DIO_u8SetPinValue+0xba>
    15b0:	8f 81       	ldd	r24, Y+7	; 0x07
    15b2:	98 85       	ldd	r25, Y+8	; 0x08
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	e9 f1       	breq	.+122    	; 0x1634 <DIO_u8SetPinValue+0xe2>
    15ba:	50 c0       	rjmp	.+160    	; 0x165c <DIO_u8SetPinValue+0x10a>
			{
			case PORT_A : SetBit( PORTA , Copy_u8PinNumber ) ; break ;
    15bc:	ab e3       	ldi	r26, 0x3B	; 59
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_u8SetPinValue+0x88>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_u8SetPinValue+0x84>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	bf c0       	rjmp	.+382    	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_B : SetBit( PORTB , Copy_u8PinNumber ) ; break ;
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_u8SetPinValue+0xb0>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_u8SetPinValue+0xac>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	ab c0       	rjmp	.+342    	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_C : SetBit( PORTC , Copy_u8PinNumber ) ; break ;
    160c:	a5 e3       	ldi	r26, 0x35	; 53
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e3       	ldi	r30, 0x35	; 53
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8SetPinValue+0xd8>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8SetPinValue+0xd4>
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	97 c0       	rjmp	.+302    	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_D : SetBit( PORTD , Copy_u8PinNumber ) ; break ;
    1634:	a2 e3       	ldi	r26, 0x32	; 50
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_u8SetPinValue+0x100>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_u8SetPinValue+0xfc>
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	83 c0       	rjmp	.+262    	; 0x1762 <DIO_u8SetPinValue+0x210>
			default     : Local_u8ErrorState = 1 ;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	80 c0       	rjmp	.+256    	; 0x1762 <DIO_u8SetPinValue+0x210>
			}//end first switch
		}//end first inner if
		else if( Copy_u8PinValue == LOW )
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <DIO_u8SetPinValue+0x118>
    1668:	77 c0       	rjmp	.+238    	; 0x1758 <DIO_u8SetPinValue+0x206>
		{
			switch( Copy_u8PortName )
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3e 83       	std	Y+6, r19	; 0x06
    1672:	2d 83       	std	Y+5, r18	; 0x05
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	59 f1       	breq	.+86     	; 0x16d4 <DIO_u8SetPinValue+0x182>
    167e:	2d 81       	ldd	r18, Y+5	; 0x05
    1680:	3e 81       	ldd	r19, Y+6	; 0x06
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <DIO_u8SetPinValue+0x140>
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f0       	breq	.+26     	; 0x16aa <DIO_u8SetPinValue+0x158>
    1690:	60 c0       	rjmp	.+192    	; 0x1752 <DIO_u8SetPinValue+0x200>
    1692:	2d 81       	ldd	r18, Y+5	; 0x05
    1694:	3e 81       	ldd	r19, Y+6	; 0x06
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	89 f1       	breq	.+98     	; 0x16fe <DIO_u8SetPinValue+0x1ac>
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <DIO_u8SetPinValue+0x156>
    16a6:	40 c0       	rjmp	.+128    	; 0x1728 <DIO_u8SetPinValue+0x1d6>
    16a8:	54 c0       	rjmp	.+168    	; 0x1752 <DIO_u8SetPinValue+0x200>
			{
			case PORT_A : ClearBit( PORTA , Copy_u8PinNumber ) ; break ;
    16aa:	ab e3       	ldi	r26, 0x3B	; 59
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8SetPinValue+0x176>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8SetPinValue+0x172>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	47 c0       	rjmp	.+142    	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_B : ClearBit( PORTB , Copy_u8PinNumber ) ; break ;
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_u8SetPinValue+0x1a0>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_u8SetPinValue+0x19c>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	32 c0       	rjmp	.+100    	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_C : ClearBit( PORTC , Copy_u8PinNumber ) ; break ;
    16fe:	a5 e3       	ldi	r26, 0x35	; 53
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_u8SetPinValue+0x1ca>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_u8SetPinValue+0x1c6>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	1d c0       	rjmp	.+58     	; 0x1762 <DIO_u8SetPinValue+0x210>
			case PORT_D : ClearBit( PORTD , Copy_u8PinNumber ) ; break ;
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8SetPinValue+0x1f4>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8SetPinValue+0x1f0>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <DIO_u8SetPinValue+0x210>
			default     : Local_u8ErrorState = 1 ;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <DIO_u8SetPinValue+0x210>
			}//end second switch
		}//end second else if of inner if
		else
		{
			Local_u8ErrorState = 1 ;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_u8SetPinValue+0x210>
		}//end else of inner if
	}//end outer if
	else
	{
		Local_u8ErrorState = 1 ;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
	}//end else of outer if
	return Local_u8ErrorState ;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    1764:	28 96       	adiw	r28, 0x08	; 8
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <DIO_u8SetPortValue>:
 ** the selected port                                    **
 **                                                      **
 **********************************************************/

u8 DIO_u8SetPortValue    ( u8 Copy_u8PortName , u8 Copy_u8PortValue )
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_u8SetPortValue+0x6>
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8SetPortValue+0x8>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0 ;
    1788:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortValue >= 0 && Copy_u8PortValue <= 255  )
	{
		switch( Copy_u8PortName )
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3d 83       	std	Y+5, r19	; 0x05
    1792:	2c 83       	std	Y+4, r18	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	d1 f0       	breq	.+52     	; 0x17d2 <DIO_u8SetPortValue+0x5c>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <DIO_u8SetPortValue+0x3c>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	61 f0       	breq	.+24     	; 0x17c8 <DIO_u8SetPortValue+0x52>
    17b0:	1f c0       	rjmp	.+62     	; 0x17f0 <DIO_u8SetPortValue+0x7a>
    17b2:	2c 81       	ldd	r18, Y+4	; 0x04
    17b4:	3d 81       	ldd	r19, Y+5	; 0x05
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	81 f0       	breq	.+32     	; 0x17dc <DIO_u8SetPortValue+0x66>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <DIO_u8SetPortValue+0x70>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A : PORTA = Copy_u8PortValue ; break ;
    17c8:	eb e3       	ldi	r30, 0x3B	; 59
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	80 83       	st	Z, r24
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <DIO_u8SetPortValue+0x7e>
		case PORT_B : PORTB = Copy_u8PortValue ; break ;
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	80 83       	st	Z, r24
    17da:	0c c0       	rjmp	.+24     	; 0x17f4 <DIO_u8SetPortValue+0x7e>
		case PORT_C : PORTC = Copy_u8PortValue ; break ;
    17dc:	e5 e3       	ldi	r30, 0x35	; 53
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	80 83       	st	Z, r24
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <DIO_u8SetPortValue+0x7e>
		case PORT_D : PORTD = Copy_u8PortValue ; break ;
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	80 83       	st	Z, r24
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_u8SetPortValue+0x7e>
		default     : Local_u8ErrorState = 1 ;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
	}//end if
	else
	{
		Local_u8ErrorState = 1 ;
	}//end else
    return Local_u8ErrorState ;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <DIO_u8ReadPin>:
 ** this function take port name && number of pin you want to read && pointer to hold read value. **
 **                                                                                               **
 ***************************************************************************************************/

u8 DIO_u8ReadPin         ( u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8* Copy_pu8ReadedValue )
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	27 97       	sbiw	r28, 0x07	; 7
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	6b 83       	std	Y+3, r22	; 0x03
    181e:	5d 83       	std	Y+5, r21	; 0x05
    1820:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    1822:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PinNumber >= 0 && Copy_u8PinNumber <= 7 )
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	08 f0       	brcs	.+2      	; 0x182c <DIO_u8ReadPin+0x26>
    182a:	74 c0       	rjmp	.+232    	; 0x1914 <DIO_u8ReadPin+0x10e>
	{
		switch( Copy_u8PortName )
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3f 83       	std	Y+7, r19	; 0x07
    1834:	2e 83       	std	Y+6, r18	; 0x06
    1836:	4e 81       	ldd	r20, Y+6	; 0x06
    1838:	5f 81       	ldd	r21, Y+7	; 0x07
    183a:	41 30       	cpi	r20, 0x01	; 1
    183c:	51 05       	cpc	r21, r1
    183e:	59 f1       	breq	.+86     	; 0x1896 <DIO_u8ReadPin+0x90>
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	9f 81       	ldd	r25, Y+7	; 0x07
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	91 05       	cpc	r25, r1
    1848:	34 f4       	brge	.+12     	; 0x1856 <DIO_u8ReadPin+0x50>
    184a:	2e 81       	ldd	r18, Y+6	; 0x06
    184c:	3f 81       	ldd	r19, Y+7	; 0x07
    184e:	21 15       	cp	r18, r1
    1850:	31 05       	cpc	r19, r1
    1852:	69 f0       	breq	.+26     	; 0x186e <DIO_u8ReadPin+0x68>
    1854:	5c c0       	rjmp	.+184    	; 0x190e <DIO_u8ReadPin+0x108>
    1856:	4e 81       	ldd	r20, Y+6	; 0x06
    1858:	5f 81       	ldd	r21, Y+7	; 0x07
    185a:	42 30       	cpi	r20, 0x02	; 2
    185c:	51 05       	cpc	r21, r1
    185e:	79 f1       	breq	.+94     	; 0x18be <DIO_u8ReadPin+0xb8>
    1860:	8e 81       	ldd	r24, Y+6	; 0x06
    1862:	9f 81       	ldd	r25, Y+7	; 0x07
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <DIO_u8ReadPin+0x66>
    186a:	3d c0       	rjmp	.+122    	; 0x18e6 <DIO_u8ReadPin+0xe0>
    186c:	50 c0       	rjmp	.+160    	; 0x190e <DIO_u8ReadPin+0x108>
		{
		case PORT_A : *Copy_pu8ReadedValue = GetBit( PINA , Copy_u8PinNumber ) ; break ;
    186e:	e9 e3       	ldi	r30, 0x39	; 57
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8ReadPin+0x80>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8ReadPin+0x7c>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	ec 81       	ldd	r30, Y+4	; 0x04
    1890:	fd 81       	ldd	r31, Y+5	; 0x05
    1892:	80 83       	st	Z, r24
    1894:	41 c0       	rjmp	.+130    	; 0x1918 <DIO_u8ReadPin+0x112>
		case PORT_B : *Copy_pu8ReadedValue = GetBit( PINB , Copy_u8PinNumber ) ; break ;
    1896:	e6 e3       	ldi	r30, 0x36	; 54
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_u8ReadPin+0xa8>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_u8ReadPin+0xa4>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	ec 81       	ldd	r30, Y+4	; 0x04
    18b8:	fd 81       	ldd	r31, Y+5	; 0x05
    18ba:	80 83       	st	Z, r24
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <DIO_u8ReadPin+0x112>
		case PORT_C : *Copy_pu8ReadedValue = GetBit( PINC , Copy_u8PinNumber ) ; break ;
    18be:	e3 e3       	ldi	r30, 0x33	; 51
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_u8ReadPin+0xd0>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_u8ReadPin+0xcc>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	ec 81       	ldd	r30, Y+4	; 0x04
    18e0:	fd 81       	ldd	r31, Y+5	; 0x05
    18e2:	80 83       	st	Z, r24
    18e4:	19 c0       	rjmp	.+50     	; 0x1918 <DIO_u8ReadPin+0x112>
		case PORT_D : *Copy_pu8ReadedValue = GetBit( PIND , Copy_u8PinNumber ) ; break ;
    18e6:	e0 e3       	ldi	r30, 0x30	; 48
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_u8ReadPin+0xf8>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_u8ReadPin+0xf4>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	ec 81       	ldd	r30, Y+4	; 0x04
    1908:	fd 81       	ldd	r31, Y+5	; 0x05
    190a:	80 83       	st	Z, r24
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <DIO_u8ReadPin+0x112>
		default     :  Local_u8ErrorState = 1 ;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8ReadPin+0x112>
		}//end switch
	}//end if
	else
	{
		Local_u8ErrorState = 1 ;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
	}//end else
	return Local_u8ErrorState ;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    191a:	27 96       	adiw	r28, 0x07	; 7
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <DIO_u8ReadPort>:
 ** take name of port && pointer to hold value **
 **                                            **
 ************************************************/

u8 DIO_u8ReadPort        ( u8 Copy_u8PortName , u8* Copy_pu8PortValue)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <DIO_u8ReadPort+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <DIO_u8ReadPort+0x8>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_u8ReadPort+0xa>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	7c 83       	std	Y+4, r23	; 0x04
    193e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8NoError = 0 ;
    1940:	19 82       	std	Y+1, r1	; 0x01
	switch( Copy_u8PortName )
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3e 83       	std	Y+6, r19	; 0x06
    194a:	2d 83       	std	Y+5, r18	; 0x05
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	e1 f0       	breq	.+56     	; 0x198e <DIO_u8ReadPort+0x62>
    1956:	2d 81       	ldd	r18, Y+5	; 0x05
    1958:	3e 81       	ldd	r19, Y+6	; 0x06
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <DIO_u8ReadPort+0x3e>
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 f0       	breq	.+24     	; 0x1980 <DIO_u8ReadPort+0x54>
    1968:	27 c0       	rjmp	.+78     	; 0x19b8 <DIO_u8ReadPort+0x8c>
    196a:	2d 81       	ldd	r18, Y+5	; 0x05
    196c:	3e 81       	ldd	r19, Y+6	; 0x06
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	a1 f0       	breq	.+40     	; 0x199c <DIO_u8ReadPort+0x70>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	b1 f0       	breq	.+44     	; 0x19aa <DIO_u8ReadPort+0x7e>
    197e:	1c c0       	rjmp	.+56     	; 0x19b8 <DIO_u8ReadPort+0x8c>
	{
	case PORT_A : *Copy_pu8PortValue = PINA ; break ;
    1980:	e9 e3       	ldi	r30, 0x39	; 57
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	eb 81       	ldd	r30, Y+3	; 0x03
    1988:	fc 81       	ldd	r31, Y+4	; 0x04
    198a:	80 83       	st	Z, r24
    198c:	17 c0       	rjmp	.+46     	; 0x19bc <DIO_u8ReadPort+0x90>
	case PORT_B : *Copy_pu8PortValue = PINB ; break ;
    198e:	e6 e3       	ldi	r30, 0x36	; 54
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	eb 81       	ldd	r30, Y+3	; 0x03
    1996:	fc 81       	ldd	r31, Y+4	; 0x04
    1998:	80 83       	st	Z, r24
    199a:	10 c0       	rjmp	.+32     	; 0x19bc <DIO_u8ReadPort+0x90>
	case PORT_C : *Copy_pu8PortValue = PINC ; break ;
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	eb 81       	ldd	r30, Y+3	; 0x03
    19a4:	fc 81       	ldd	r31, Y+4	; 0x04
    19a6:	80 83       	st	Z, r24
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <DIO_u8ReadPort+0x90>
	case PORT_D : *Copy_pu8PortValue = PIND ; break ;
    19aa:	e0 e3       	ldi	r30, 0x30	; 48
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	eb 81       	ldd	r30, Y+3	; 0x03
    19b2:	fc 81       	ldd	r31, Y+4	; 0x04
    19b4:	80 83       	st	Z, r24
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_u8ReadPort+0x90>
	default     : Local_u8NoError = 1 ;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
	}//end switch case
	return Local_u8NoError ;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
}//end function
    19be:	26 96       	adiw	r28, 0x06	; 6
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <main>:

#include "1-MCAL/1-DIO/DIO_interface.h"


void main( void )
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	60 97       	sbiw	r28, 0x10	; 16
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
	/* initiate direction of pins of LCD */
	DIO_u8SetPortDirection(LCD_DATA_PORT, OUTPUT);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	0e 94 22 0a 	call	0x1444	; 0x1444 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	65 e0       	ldi	r22, 0x05	; 5
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	66 e0       	ldi	r22, 0x06	; 6
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT, LCD_ENABLE_PIN, OUTPUT);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	67 e0       	ldi	r22, 0x07	; 7
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 0f 09 	call	0x121e	; 0x121e <DIO_u8SetPinDirection>

	/* call initiate function */
	LCD_voidInit() ;
    1a0a:	0e 94 30 06 	call	0xc60	; 0xc60 <LCD_voidInit>

	LCD_voidAddSpecialChar( LCD_pu8SpecialChars[0], 0);
    1a0e:	80 e7       	ldi	r24, 0x70	; 112
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCD_voidAddSpecialChar>
	LCD_voidAddSpecialChar( LCD_pu8SpecialChars[1], 1);
    1a18:	88 e7       	ldi	r24, 0x78	; 120
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCD_voidAddSpecialChar>
	LCD_voidAddSpecialChar( LCD_pu8SpecialChars[2], 2);
    1a22:	80 e8       	ldi	r24, 0x80	; 128
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCD_voidAddSpecialChar>
	LCD_voidAddSpecialChar( LCD_pu8SpecialChars[3], 3);
    1a2c:	88 e8       	ldi	r24, 0x88	; 136
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	63 e0       	ldi	r22, 0x03	; 3
    1a32:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCD_voidAddSpecialChar>
	LCD_voidAddSpecialChar( LCD_pu8SpecialChars[4], 4);
    1a36:	80 e9       	ldi	r24, 0x90	; 144
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	64 e0       	ldi	r22, 0x04	; 4
    1a3c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCD_voidAddSpecialChar>

	LCD_voidPrintSpecialChar(0, 0, 0);
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidPrintSpecialChar>

	LCD_voidPrintSpecialChar(4, 0, 1);
    1a4a:	84 e0       	ldi	r24, 0x04	; 4
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidPrintSpecialChar>


	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 5 ; Local_u8Counter++ )
    1a54:	18 8a       	std	Y+16, r1	; 0x10
    1a56:	a3 c0       	rjmp	.+326    	; 0x1b9e <main+0x1ce>
	{
		for( u8 Local_u8Motion = 1 ; Local_u8Motion < 4 ; Local_u8Motion++ )
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
    1a5c:	99 c0       	rjmp	.+306    	; 0x1b90 <main+0x1c0>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	aa e7       	ldi	r26, 0x7A	; 122
    1a64:	b3 e4       	ldi	r27, 0x43	; 67
    1a66:	8b 87       	std	Y+11, r24	; 0x0b
    1a68:	9c 87       	std	Y+12, r25	; 0x0c
    1a6a:	ad 87       	std	Y+13, r26	; 0x0d
    1a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8f 83       	std	Y+7, r24	; 0x07
    1a88:	98 87       	std	Y+8, r25	; 0x08
    1a8a:	a9 87       	std	Y+9, r26	; 0x09
    1a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <main+0xe0>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <main+0x15e>
	else if (__tmp > 65535)
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <main+0x140>
    1af2:	88 ec       	ldi	r24, 0xC8	; 200
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <main+0x12e>
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <main+0x122>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1c:	78 85       	ldd	r23, Y+8	; 0x08
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <main+0x16a>
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(250);

			LCD_voidClear();
    1b42:	0e 94 30 08 	call	0x1060	; 0x1060 <LCD_voidClear>

			LCD_voidPrintSpecialChar(Local_u8Motion, 0, (Local_u8Motion + 3 * Local_u8Counter));
    1b46:	88 89       	ldd	r24, Y+16	; 0x10
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	c9 01       	movw	r24, r18
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	82 0f       	add	r24, r18
    1b54:	93 1f       	adc	r25, r19
    1b56:	98 2f       	mov	r25, r24
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	98 0f       	add	r25, r24
    1b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	49 2f       	mov	r20, r25
    1b62:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidPrintSpecialChar>

			LCD_voidPrintSpecialChar(4, 0, (Local_u8Motion + 3 * Local_u8Counter) + 1);
    1b66:	88 89       	ldd	r24, Y+16	; 0x10
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	98 2f       	mov	r25, r24
    1b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7a:	89 0f       	add	r24, r25
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	9f 5f       	subi	r25, 0xFF	; 255
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	49 2f       	mov	r20, r25
    1b86:	0e 94 9a 08 	call	0x1134	; 0x1134 <LCD_voidPrintSpecialChar>
	LCD_voidPrintSpecialChar(4, 0, 1);


	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 5 ; Local_u8Counter++ )
	{
		for( u8 Local_u8Motion = 1 ; Local_u8Motion < 4 ; Local_u8Motion++ )
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <main+0x1c8>
    1b96:	63 cf       	rjmp	.-314    	; 0x1a5e <main+0x8e>
	LCD_voidPrintSpecialChar(0, 0, 0);

	LCD_voidPrintSpecialChar(4, 0, 1);


	for( u8 Local_u8Counter = 0 ; Local_u8Counter < 5 ; Local_u8Counter++ )
    1b98:	88 89       	ldd	r24, Y+16	; 0x10
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	88 8b       	std	Y+16, r24	; 0x10
    1b9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	08 f4       	brcc	.+2      	; 0x1ba6 <main+0x1d6>
    1ba4:	59 cf       	rjmp	.-334    	; 0x1a58 <main+0x88>

			LCD_voidPrintSpecialChar(4, 0, (Local_u8Motion + 3 * Local_u8Counter) + 1);

		}
	}
	LCD_voidClear();
    1ba6:	0e 94 30 08 	call	0x1060	; 0x1060 <LCD_voidClear>

	LCD_voidSetCursorPos(0, 6);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	66 e0       	ldi	r22, 0x06	; 6
    1bae:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_voidSetCursorPos>
	LCD_voidPrintString("THE");
    1bb2:	80 e6       	ldi	r24, 0x60	; 96
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_voidPrintString>
	LCD_voidSetCursorPos(1, 6);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	66 e0       	ldi	r22, 0x06	; 6
    1bbe:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_voidSetCursorPos>
	LCD_voidPrintString("END");
    1bc2:	84 e6       	ldi	r24, 0x64	; 100
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 fa 07 	call	0xff4	; 0xff4 <LCD_voidPrintString>
    1bca:	ff cf       	rjmp	.-2      	; 0x1bca <main+0x1fa>

00001bcc <__udivmodsi4>:
    1bcc:	a1 e2       	ldi	r26, 0x21	; 33
    1bce:	1a 2e       	mov	r1, r26
    1bd0:	aa 1b       	sub	r26, r26
    1bd2:	bb 1b       	sub	r27, r27
    1bd4:	fd 01       	movw	r30, r26
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <__udivmodsi4_ep>

00001bd8 <__udivmodsi4_loop>:
    1bd8:	aa 1f       	adc	r26, r26
    1bda:	bb 1f       	adc	r27, r27
    1bdc:	ee 1f       	adc	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	a2 17       	cp	r26, r18
    1be2:	b3 07       	cpc	r27, r19
    1be4:	e4 07       	cpc	r30, r20
    1be6:	f5 07       	cpc	r31, r21
    1be8:	20 f0       	brcs	.+8      	; 0x1bf2 <__udivmodsi4_ep>
    1bea:	a2 1b       	sub	r26, r18
    1bec:	b3 0b       	sbc	r27, r19
    1bee:	e4 0b       	sbc	r30, r20
    1bf0:	f5 0b       	sbc	r31, r21

00001bf2 <__udivmodsi4_ep>:
    1bf2:	66 1f       	adc	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	1a 94       	dec	r1
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <__udivmodsi4_loop>
    1bfe:	60 95       	com	r22
    1c00:	70 95       	com	r23
    1c02:	80 95       	com	r24
    1c04:	90 95       	com	r25
    1c06:	9b 01       	movw	r18, r22
    1c08:	ac 01       	movw	r20, r24
    1c0a:	bd 01       	movw	r22, r26
    1c0c:	cf 01       	movw	r24, r30
    1c0e:	08 95       	ret

00001c10 <__prologue_saves__>:
    1c10:	2f 92       	push	r2
    1c12:	3f 92       	push	r3
    1c14:	4f 92       	push	r4
    1c16:	5f 92       	push	r5
    1c18:	6f 92       	push	r6
    1c1a:	7f 92       	push	r7
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	ca 1b       	sub	r28, r26
    1c3a:	db 0b       	sbc	r29, r27
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	09 94       	ijmp

00001c48 <__epilogue_restores__>:
    1c48:	2a 88       	ldd	r2, Y+18	; 0x12
    1c4a:	39 88       	ldd	r3, Y+17	; 0x11
    1c4c:	48 88       	ldd	r4, Y+16	; 0x10
    1c4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c5e:	df 80       	ldd	r13, Y+7	; 0x07
    1c60:	ee 80       	ldd	r14, Y+6	; 0x06
    1c62:	fd 80       	ldd	r15, Y+5	; 0x05
    1c64:	0c 81       	ldd	r16, Y+4	; 0x04
    1c66:	1b 81       	ldd	r17, Y+3	; 0x03
    1c68:	aa 81       	ldd	r26, Y+2	; 0x02
    1c6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c6c:	ce 0f       	add	r28, r30
    1c6e:	d1 1d       	adc	r29, r1
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	ed 01       	movw	r28, r26
    1c7c:	08 95       	ret

00001c7e <_exit>:
    1c7e:	f8 94       	cli

00001c80 <__stop_program>:
    1c80:	ff cf       	rjmp	.-2      	; 0x1c80 <__stop_program>
